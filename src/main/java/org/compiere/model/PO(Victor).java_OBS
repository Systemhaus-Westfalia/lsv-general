package org.compiere.model;

import java.io.Serializable;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.logging.Level;
import java.util.stream.Collectors;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.adempiere.core.domains.models.X_AD_Column;
import org.adempiere.core.domains.models.X_C_ElementValue;
import org.adempiere.exceptions.AdempiereException;
import org.adempiere.exceptions.DBException;
import org.adempiere.model.GenericPO;
import org.compiere.Adempiere;
import org.compiere.acct.Doc;
import org.compiere.util.CLogMgt;
import org.compiere.util.CLogger;
import org.compiere.util.CacheMgt;
import org.compiere.util.DB;
import org.compiere.util.DisplayType;
import org.compiere.util.Env;
import org.compiere.util.Evaluatee;
import org.compiere.util.Ini;
import org.compiere.util.Msg;
import org.compiere.util.SecureEngine;
import org.compiere.util.Trace;
import org.compiere.util.Trx;
import org.compiere.util.Util;
import org.compiere.util.ValueNamePair;
import org.w3c.dom.Document;
import org.w3c.dom.Element;


import java.io.StringWriter;
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.logging.Level;
import java.util.stream.Collectors;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.adempiere.core.domains.models.I_AD_Element;
import org.adempiere.core.domains.models.I_AD_Session;
import org.adempiere.core.domains.models.X_C_ElementValue;
import org.adempiere.exceptions.AdempiereException;
import org.adempiere.exceptions.DBException;
import org.adempiere.model.GenericPO;
import org.compiere.Adempiere;
import org.compiere.acct.Doc;
import org.compiere.util.CLogMgt;
import org.compiere.util.CLogger;
import org.compiere.util.CacheMgt;
import org.compiere.util.DB;
import org.compiere.util.DisplayType;
import org.compiere.util.Env;
import org.compiere.util.Evaluatee;
import org.compiere.util.Ini;
import org.compiere.util.Msg;
import org.compiere.util.SecureEngine;
import org.compiere.util.Trace;
import org.compiere.util.Trx;
import org.compiere.util.Util;
import org.compiere.util.ValueNamePair;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 *  Persistent Object.
 *  Superclass for actual implementations
 *
 *  @author Jorg Janke
 *  @version $Id: PO.java,v 1.12 2006/08/09 16:38:47 jjanke Exp $
 *
 *  @author Teo Sarca, SC ARHIPAC SERVICE SRL
 *			<li>FR [ 1675490 ] ModelValidator on modelChange after events
 *			<li>BF [ 1704828 ] PO.is_Changed() and PO.is_ValueChanged are not consistent
 *			<li>FR [ 1720995 ] Add PO.saveEx() and PO.deleteEx() methods
 *			<li>BF [ 1990856 ] PO.set_Value* : truncate string more than needed
 *			<li>FR [ 2042844 ] PO.get_Translation improvements
 *			<li>FR [ 2818369 ] Implement PO.get_ValueAs*(columnName)
 *				https://sourceforge.net/tracker/?func=detail&aid=2818369&group_id=176962&atid=879335
 *			<li>BF [ 2849122 ] PO.AfterSave is not rollback on error
 *				https://sourceforge.net/tracker/?func=detail&aid=2849122&group_id=176962&atid=879332
 *			<li>BF [ 2859125 ] Can't set AD_OrgBP_ID
 *				https://sourceforge.net/tracker/index.php?func=detail&aid=2859125&group_id=176962&atid=879332
 *			<li>BF [ 2866493 ] VTreePanel is not saving who did the node move
 *				https://sourceforge.net/tracker/?func=detail&atid=879332&aid=2866493&group_id=176962
 * @author Teo Sarca, teo.sarca@gmail.com
 * 			<li>BF [ 2876259 ] PO.insertTranslation query is not correct
 * 				https://sourceforge.net/tracker/?func=detail&aid=2876259&group_id=176962&atid=879332
 * @author Victor Perez, e-Evolution SC
 *			<li>[ 2195894 ] Improve performance in PO engine
 *			<li>http://sourceforge.net/tracker/index.php?func=detail&aid=2195894&group_id=176962&atid=879335
 *			<li>BF [2947622] The replication ID (Primary Key) is not working
 *			<li>https://sourceforge.net/tracker/?func=detail&aid=2947622&group_id=176962&atid=879332
 *			<li>Error when try load a PO Entity with virtual columns
 *			<li>http://adempiere.atlassian.net/browse/ADEMPIERE-100
 *			<li>#439 The migration xml generation not persisted the insert the tables with suffix Acct</li>
 *			<li>https://github.com/adempiere/adempiere/issues/439</>
 * @author Yamel Senih, ysenih@erpcya.com, ERPCyA http://www.erpcya.com
 *			<li> FR [ 392 ] Translation method does not use PO class
 *			@see https://github.com/adempiere/adempiere/issues/392
 *			<a href="https://github.com/adempiere/adempiere/issues/673">
 * 			@see FR [ 673 ] Model Migration don't load current value for Multi-Key records</a>
 * 			<a href="https://github.com/adempiere/adempiere/issues/922">
 * 			@see FR [ 922 ] Is Allow Copy in model</a>
 * @author Carlos Parada, cparada@erpya.com, ERPCyA http://www.erpya.com
 *  		<a href="https://github.com/adempiere/adempiere/issues/729">
 *			@see FR [ 729 ] Add Support to Parent Column And Search Column for Tree </a>
 * @author Edwin Betancourt, EdwinBetanc0urt@outlook.com, https://github.com/EdwinBetanc0urt
 *			<a href="https://github.com/adempiere/adempiere/issues/4000">
 *			@see BR [ 4000 ] Allows deletion of System client records with the GardenWorld client</a>
 */

public abstract class PO 
implements Serializable, Comparator, Evaluatee, Cloneable {

	/**
	 *
	 */
	private static final long serialVersionUID = -4708137979682082002L;

	private static final String USE_TIMEOUT_FOR_UPDATE = "org.adempiere.po.useTimeoutForUpdate";

	private static final int QUERY_TIME_OUT = 10;

    private String m_trxName;
	private ArrayList<PO_LOB> m_lobInfo;
	private Doc m_doc;




	/**
	 * get instance based on table id , record id and trxName
	 * @param tableId
	 * @param recordIds
	 * @param trxName
     * @return
	 * @throws AdempiereException
     */


   public static List<?> getInstances(Integer tableId, List<Integer> recordIds, String trxName) throws AdempiereException 
   {
      if (tableId <= 0) {
         throw new AdempiereException("@AD_Table_ID@  @NotFound@");
      } else if (recordIds != null && recordIds.size() > 0) {
         MTable table = MTable.get(Env.getCtx(), tableId);
         return (List)recordIds.stream().filter((recordId) -> {
            return recordId > 0;
         }).map((recordId) -> {
            return table.getPO(recordId, trxName);
         }).collect(Collectors.toList());
      } else {
         throw new AdempiereException("@NoRecordID@");
      }
   }

	/**
	 * 	Set Document Value Workflow Manager
	 *	@param docWFMgr mgr
	 */

   
   
   public static void setDocWorkflowMgr (DocWorkflowMgr docWFMgr)
	{
      s_docWFMgr = docWFMgr;
      s_log.config(s_docWFMgr.toString());
   }
   

	/** Document Value Workflow Manager		*/
	private static DocWorkflowMgr		s_docWFMgr = null;

	/** User Maintained Entity Type				*/
	static protected final String ENTITYTYPE_UserMaintained = "U";
	/** Dictionary Maintained Entity Type		*/
	static protected final String ENTITYTYPE_Dictionary = "D";

	/**************************************************************************
	 *  Create New Persistent Object
	 *  @param ctx context
	 */

   public PO(Properties ctx) 
   {
      this(ctx, 0, (String)null, (ResultSet)null);
   }
   
   /**
	 *  Create & Load existing Persistent Object.
	 *  <pre>
	 *  You load
	 * 		- an existing single key record with 	new PO (ctx, Record_ID)
	 * 			or									new PO (ctx, Record_ID, trxName)
	 * 			or									new PO (ctx, rs, get_TrxName())
	 * 		- a new single key record with			new PO (ctx, 0)
	 * 		- an existing multi key record with		new PO (ctx, rs, get_TrxName())
	 * 		- a new multi key record with			new PO (ctx, null)
	 *  The ID for new single key records is created automatically,
	 *  you need to set the IDs for multi-key records explicitly.
	 *	</pre>
	 *  @param ctx context
	 *  @param ID the ID if 0, the record defaults are applied - ignored if re exists
	 *  @param trxName transaction name
	 *  @param rs optional - load from current result set position (no navigation, not closed)
	 */

   public PO(Properties ctx, int ID, String trxName) {
      this(ctx, ID, trxName, (ResultSet)null);
   }

   public PO(Properties ctx, ResultSet rs, String trxName) {
      this(ctx, 0, trxName, rs);
   }

   public PO(Properties ctx, int ID, String trxName, ResultSet rs) {
      this.log = CLogger.getCLogger(this.getClass());
      this.p_info = null;
      this.m_oldValues = null;
      this.m_newValues = null;
      this.m_IDs = new Object[]{I_ZERO};
      this.m_KeyColumns = null;
      this.m_createNew = false;
      this.m_attachment = null;
      this.m_idOld = 0;
      this.m_custom = null;
      this.s_acctColumns = null;
      this.m_isReplication = false;
      this.isDirectLoad = false;
      this.m_trxName = null;
      this.m_lobInfo = null;
      if (ctx == null) {
         throw new IllegalArgumentException("No Context");
      } else {
         this.p_ctx = ctx;
         this.m_trxName = trxName;
         this.p_info = this.initPO(ctx);
         if (this.p_info != null && this.p_info.getTableName() != null) {
            int size = this.p_info.getColumnCount();
            this.m_oldValues = new Object[size];
            this.m_newValues = new Object[size];
            if (rs != null) {
               this.load(rs);
            } else {
               this.load(ID, trxName);
            }

         } else {
            throw new IllegalArgumentException("Invalid PO Info - " + this.p_info);
         }
      }
   }

   public PO(Properties ctx, PO source, int AD_Client_ID, int AD_Org_ID) {
      this(ctx, 0, (String)null, (ResultSet)null);
      if (source != null) {
         copyValues(source, this);
      }

      this.setAD_Client_ID(AD_Client_ID);
      this.setAD_Org_ID(AD_Org_ID);
   }
   


	/**	Logger							*/
	protected transient CLogger	log = CLogger.getCLogger (getClass());
	/** Static Logger					*/
	private static CLogger		s_log = CLogger.getCLogger (PO.class);

	/** Context                 */
	protected Properties		p_ctx;
	/** Model Info              */
	protected volatile POInfo	p_info = null;

	/** Original Values         */
	private Object[]    		m_oldValues = null;
	/** New Values              */
	private Object[]    		m_newValues = null;

	/** Record_IDs          		*/
	private Object[]       		m_IDs = new Object[] {I_ZERO};
	/** Key Columns					*/
	private String[]         	m_KeyColumns = null;
	/** Create New for Multi Key 	*/
	private boolean				m_createNew = false;
	/**	Attachment with entries	*/
	private MAttachment			m_attachment = null;
	/**	Deleted ID					*/
	private int					m_idOld = 0;
	/** Custom Columns 				*/
	private HashMap<String,String>	m_custom = null;

	/** Zero Integer				*/
	protected static final Integer I_ZERO = Integer.valueOf(0);
	/** Accounting Columns			*/
	private ArrayList <String>	s_acctColumns = null;

	/** Trifon - Indicates that this record is created by replication functionality.*/
	private boolean m_isReplication = false;

	/** Direct load, e.g. from migration. Do not overwrite assigned ID with generated one, or fire triggers */
	private boolean isDirectLoad = false;

   public boolean isDirectLoad() {
      return this.isDirectLoad;
   }

   public void setIsDirectLoad(boolean directLoad) {
      this.isDirectLoad = directLoad;
   }

   protected abstract POInfo initPO(Properties var1);

   protected abstract int get_AccessLevel();

   public String toString() {
      StringBuffer sb = (new StringBuffer("PO[")).append(this.get_WhereClause(true)).append(", UUID=").append(this.get_UUID()).append("]");
      return sb.toString();
   }

   public boolean equals(Object cmp) {
      if (this == cmp) {
         return true;
      } else if (cmp == null) {
         return false;
      } else if (!(cmp instanceof PO)) {
         return false;
      } else if (cmp.getClass().equals(this.getClass())) {
         if (((PO)cmp).get_ID() == 0 && this.get_ID() == 0) {
            return super.equals(cmp);
         } else {
            return ((PO)cmp).get_ID() == this.get_ID();
         }
      } else {
         return super.equals(cmp);
      }
   }

   public int compare(Object o1, Object o2) {
      if (o1 == null) {
         return -1;
      } else if (o2 == null) {
         return 1;
      } else if (!(o1 instanceof PO)) {
         throw new ClassCastException("Not PO -1- " + o1);
      } else if (!(o2 instanceof PO)) {
         throw new ClassCastException("Not PO -2- " + o2);
      } else {
         if (o1.getClass().equals(o2.getClass())) {
            int index = this.get_ColumnIndex("DocumentNo");
            if (index == -1) {
               index = this.get_ColumnIndex("Value");
            }

            if (index == -1) {
               index = this.get_ColumnIndex("Name");
            }

            if (index == -1) {
               index = this.get_ColumnIndex("Description");
            }

            if (index != -1) {
               PO po1 = (PO)o1;
               Object comp1 = po1.get_Value(index);
               PO po2 = (PO)o2;
               Object comp2 = po2.get_Value(index);
               if (comp1 == null) {
                  return -1;
               }

               if (comp2 == null) {
                  return 1;
               }

               return comp1.toString().compareTo(comp2.toString());
            }
         }

         return o1.toString().compareTo(o2.toString());
      }
   }

   public String get_TableName() {
      return this.p_info.getTableName();
   }

   public String[] get_KeyColumns() {
      return this.m_KeyColumns;
   }

   public int get_Table_ID() {
      return this.p_info.getAD_Table_ID();
   }

   public int get_ID() {
      Object oo = this.m_IDs[0];
      return oo != null && oo instanceof Integer ? (Integer)oo : 0;
   }

   public String get_UUID() {
      return this.get_ValueAsString("UUID");
   }

   public int get_IDOld() {
      return this.m_idOld;
   }

   public Properties getCtx() {
      return this.p_ctx;
   }

   public CLogger get_Logger() {
      return this.log;
   }

   public final Object get_Value(int index) {
      if (index >= 0 && index < this.get_ColumnCount()) {
         if (this.m_newValues[index] != null) {
            return this.m_newValues[index].equals(Null.NULL) ? null : this.m_newValues[index];
         } else {
            return this.m_oldValues[index];
         }
      } else {
         this.log.log(Level.WARNING, "Index invalid - " + index);
         return null;
      }
   }

   public int get_ValueAsInt(int index) {
      Object value = this.get_Value(index);
      if (value == null) {
         return 0;
      } else if (value instanceof Integer) {
         return (Integer)value;
      } else {
         try {
            return Integer.parseInt(value.toString());
         } catch (NumberFormatException var4) {
            CLogger var10000 = this.log;
            String var10001 = this.p_info.getColumnName(index);
            var10000.warning(var10001 + " - " + var4.getMessage());
            return 0;
         }
      }
   }

   public final Object get_Value(String columnName) {
      int index = this.get_ColumnIndex(columnName);
      if (index < 0) {
         this.log.log(Level.WARNING, "Column not found - " + columnName);
         Trace.printStack();
         return null;
      } else {
         return this.get_Value(index);
      }
   }

   protected final Object get_ValueE(String columnName) {
      return this.get_Value(columnName);
   }

   public String get_ValueAsString(String variableName) {
      Object value = this.get_Value(variableName);
      return value == null ? "" : value.toString();
   }

   public final Object get_ValueOfColumn(int AD_Column_ID) {
      int index = this.p_info.getColumnIndex(AD_Column_ID);
      if (index < 0) {
         this.log.log(Level.WARNING, "Not found - AD_Column_ID=" + AD_Column_ID);
         return null;
      } else {
         return this.get_Value(index);
      }
   }

   public final Object get_ValueOld(int index) {
      if (index >= 0 && index < this.get_ColumnCount()) {
         return this.m_oldValues[index];
      } else {
         this.log.log(Level.WARNING, "Index invalid - " + index);
         return null;
      }
   }

   public final Object get_ValueOld(String columnName) {
      int index = this.get_ColumnIndex(columnName);
      if (index < 0) {
         this.log.log(Level.WARNING, "Column not found - " + columnName);
         return null;
      } else {
         return this.get_ValueOld(index);
      }
   }

   public int get_ValueOldAsInt(String columnName) {
      Object value = this.get_ValueOld(columnName);
      if (value == null) {
         return 0;
      } else if (value instanceof Integer) {
         return (Integer)value;
      } else {
         try {
            return Integer.parseInt(value.toString());
         } catch (NumberFormatException var4) {
            this.log.warning(columnName + " - " + var4.getMessage());
            return 0;
         }
      }
   }

   public final boolean is_ValueChanged(int index) {
      if (index >= 0 && index < this.get_ColumnCount()) {
         if (this.m_newValues[index] == null || this.m_newValues[index].equals(Null.NULL) && this.m_oldValues[index] == null) {
            return false;
         } else {
            return !this.m_newValues[index].equals(this.m_oldValues[index]);
         }
      } else {
         this.log.log(Level.WARNING, "Index invalid - " + index);
         return false;
      }
   }

   public final boolean is_ValueChanged(String columnName) {
      int index = this.get_ColumnIndex(columnName);
      if (index < 0) {
         this.log.log(Level.WARNING, "Column not found - " + columnName);
         return false;
      } else {
         return this.is_ValueChanged(index);
      }
   }

   public final Object get_ValueDifference(int index) {
      if (index >= 0 && index < this.get_ColumnCount()) {
         Object nValue = this.m_newValues[index];
         if (nValue != null && nValue != Null.NULL) {
            Object oValue = this.m_oldValues[index];
            if (oValue != null && oValue != Null.NULL) {
               if (nValue instanceof BigDecimal) {
                  BigDecimal obd = (BigDecimal)oValue;
                  return ((BigDecimal)nValue).subtract(obd);
               } else if (nValue instanceof Integer) {
                  int result = (Integer)nValue;
                  result -= (Integer)oValue;
                  return result;
               } else {
                  this.log.warning("Invalid type - New=" + nValue);
                  return null;
               }
            } else {
               return nValue;
            }
         } else {
            return null;
         }
      } else {
         this.log.log(Level.WARNING, "Index invalid - " + index);
         return null;
      }
   }

   public final Object get_ValueDifference(String columnName) {
      int index = this.get_ColumnIndex(columnName);
      if (index < 0) {
         this.log.log(Level.WARNING, "Column not found - " + columnName);
         return null;
      } else {
         return this.get_ValueDifference(index);
      }
   }

   protected final boolean set_Value(String ColumnName, Object value) {
      if (value instanceof String && ColumnName.equals("WhereClause") && value.toString().toUpperCase().indexOf("=NULL") != -1) {
         this.log.warning("Invalid Null Value - " + ColumnName + "=" + value);
      }

      int index = this.get_ColumnIndex(ColumnName);
      if (index < 0) {
         this.log.log(Level.SEVERE, "Column not found - " + ColumnName);
         return false;
      } else {
         if (ColumnName.endsWith("_ID") && value instanceof String) {
            Class<?> clazz = this.p_info.getColumnClass(this.p_info.getColumnIndex(ColumnName));
            if (Integer.class == clazz) {
               this.log.severe("Invalid Data Type for " + ColumnName + "=" + value);
               value = Integer.parseInt((String)value);
            }
         }

         return this.set_Value(index, value);
      }
   }

   protected final boolean set_ValueE(String ColumnName, Object value) {
      return this.set_Value(ColumnName, value);
   }

   protected final boolean set_Value(int index, Object value) {
      if (index >= 0 && index < this.get_ColumnCount()) {
         String ColumnName = this.p_info.getColumnName(index);
         String colInfo = " - " + ColumnName;
         if (this.p_info.isVirtualColumn(index)) {
            this.log.log(Level.WARNING, "Virtual Column" + colInfo);
            return false;
         } else if (!this.p_info.isColumnUpdateable(index) && !this.is_new()) {
            colInfo = colInfo + " - NewValue=" + value + " - OldValue=" + this.get_Value(index);
            this.log.log(Level.WARNING, "Column not updateable" + colInfo);
            return false;
         } else {
            if (value == null) {
               if (this.p_info.isColumnMandatory(index)) {
                  throw new IllegalArgumentException(ColumnName + " is mandatory.");
               }

               this.m_newValues[index] = Null.NULL;
               this.log.finer(ColumnName + " = null");
            } else {
               if (!value.getClass().equals(this.p_info.getColumnClass(index)) && this.p_info.getColumnClass(index) != Object.class) {
                  if (value.getClass() == BigDecimal.class && this.p_info.getColumnClass(index) == Integer.class) {
                     this.m_newValues[index] = ((BigDecimal)value).intValue();
                  } else if (this.p_info.getColumnClass(index) != Boolean.class || !"Y".equals(value) && !"N".equals(value)) {
                     if (value.getClass() == Integer.class && this.p_info.getColumnClass(index) == String.class) {
                        this.m_newValues[index] = value;
                     } else {
                        if (value.getClass() != String.class || this.p_info.getColumnClass(index) != Integer.class) {
                           this.log.log(Level.SEVERE, ColumnName + " - Class invalid: " + value.getClass().toString() + ", Should be " + this.p_info.getColumnClass(index).toString() + ": " + value);
                           return false;
                        }

                        try {
                           this.m_newValues[index] = Integer.valueOf((String)value);
                        } catch (NumberFormatException var11) {
                           this.log.log(Level.SEVERE, ColumnName + " - Class invalid: " + value.getClass().toString() + ", Should be " + this.p_info.getColumnClass(index).toString() + ": " + value);
                           return false;
                        }
                     }
                  } else {
                     this.m_newValues[index] = "Y".equals(value);
                  }
               } else {
                  this.m_newValues[index] = value;
               }

               String error = this.p_info.validate(index, value);
               if (error != null) {
                  this.log.log(Level.WARNING, ColumnName + "=" + value + " - " + error);
                  return false;
               }

               if (this.p_info.getColumnClass(index) == String.class) {
                  String stringValue = value.toString();
                  int length = this.p_info.getFieldLength(index);
                  if (stringValue.length() > length && length > 0) {
                     this.log.warning(ColumnName + " - Value too long - truncated to length=" + length);
                     this.m_newValues[index] = stringValue.substring(0, length);
                  }
               }

               if (this.p_info.getColumn(index).DisplayType == 17 && this.p_info.getColumn(index).AD_Reference_Value_ID > 0 && value instanceof String && MRefList.get(this.getCtx(), this.p_info.getColumn(index).AD_Reference_Value_ID, (String)value, this.get_TrxName()) == null) {
                  StringBuffer validValues = new StringBuffer();
                  ValueNamePair[] var13 = MRefList.getList(this.getCtx(), this.p_info.getColumn(index).AD_Reference_Value_ID, false);
                  int var8 = var13.length;

                  for(int var9 = 0; var9 < var8; ++var9) {
                     ValueNamePair vp = var13[var9];
                     validValues.append(" - ").append(vp.getValue());
                  }

                  throw new IllegalArgumentException(ColumnName + " Invalid value - " + value + " - Reference_ID=" + this.p_info.getColumn(index).AD_Reference_Value_ID + validValues.toString());
               }

               if (CLogMgt.isLevelFinest()) {
                  this.log.finest(ColumnName + " = " + this.m_newValues[index] + " (OldValue=" + this.m_oldValues[index] + ")");
               }
            }

            this.set_Keys(ColumnName, this.m_newValues[index]);
            this.setProcessedOn(ColumnName, value, this.m_oldValues[index]);
            return true;
         }
      } else {
         this.log.log(Level.WARNING, "Index invalid - " + index);
         return false;
      }
   }

   public void setProcessedOn(String ColumnName, Object value, Object oldValue) {
      if ("Processed".equals(ColumnName) && value instanceof Boolean && (Boolean)value && (oldValue == null || oldValue instanceof Boolean && !(Boolean)oldValue) && this.get_ColumnIndex("ProcessedOn") > 0) {
         Timestamp ts = DB.getSQLValueTS((String)null, "SELECT CURRENT_TIMESTAMP FROM DUAL", new Object[0]);
         long mili = ts.getTime();
         int nano = ts.getNanos();
         String var10000 = Long.toString(mili);
         double doublets = Double.parseDouble(var10000 + "." + Integer.toString(nano));
         BigDecimal bdtimestamp = new BigDecimal(doublets);
         this.set_Value("ProcessedOn", bdtimestamp);
      }

   }

   protected final boolean set_ValueNoCheck(String ColumnName, Object value) {
      int index = this.get_ColumnIndex(ColumnName);
      if (index < 0) {
         this.log.log(Level.SEVERE, "Column not found - " + ColumnName);
         return false;
      } else {
         if (value == null) {
            this.m_newValues[index] = Null.NULL;
         } else {
            if (!value.getClass().equals(this.p_info.getColumnClass(index)) && this.p_info.getColumnClass(index) != Object.class) {
               if (value.getClass() == BigDecimal.class && this.p_info.getColumnClass(index) == Integer.class) {
                  this.m_newValues[index] = ((BigDecimal)value).intValue();
               } else if (this.p_info.getColumnClass(index) == Boolean.class && ("Y".equals(value) || "N".equals(value))) {
                  this.m_newValues[index] = "Y".equals(value);
               } else if (this.p_info.getColumnClass(index) == Integer.class && value.getClass() == String.class) {
                  try {
                     int intValue = Integer.parseInt((String)value);
                     this.m_newValues[index] = intValue;
                  } catch (Exception var7) {
                     this.log.warning(ColumnName + " - Class invalid: " + value.getClass().toString() + ", Should be " + this.p_info.getColumnClass(index).toString() + ": " + value);
                     this.m_newValues[index] = null;
                  }
               } else {
                  this.log.warning(ColumnName + " - Class invalid: " + value.getClass().toString() + ", Should be " + this.p_info.getColumnClass(index).toString() + ": " + value);
                  this.m_newValues[index] = value;
               }
            } else {
               this.m_newValues[index] = value;
            }

            String error = this.p_info.validate(index, value);
            if (error != null) {
               this.log.warning(ColumnName + "=" + value + " - " + error);
            }

            if (this.p_info.getColumnClass(index) == String.class) {
               String stringValue = value.toString();
               int length = this.p_info.getFieldLength(index);
               if (stringValue.length() > length && length > 0) {
                  this.log.warning(ColumnName + " - Value too long - truncated to length=" + length);
                  this.m_newValues[index] = stringValue.substring(0, length);
               }
            }
         }

         this.log.finest(ColumnName + " = " + this.m_newValues[index] + " (" + (this.m_newValues[index] == null ? "-" : this.m_newValues[index].getClass().getName()) + ")");
         this.set_Keys(ColumnName, this.m_newValues[index]);
         this.setProcessedOn(ColumnName, value, this.m_oldValues[index]);
         return true;
      }
   }

   protected final boolean set_ValueNoCheckE(String ColumnName, Object value) {
      return this.set_ValueNoCheck(ColumnName, value);
   }

   public final void set_ValueOfColumn(String columnName, Object value) {
      this.set_ValueOfColumnReturningBoolean(columnName, value);
   }

   public final boolean set_ValueOfColumnReturningBoolean(String columnName, Object value) {
      int AD_Column_ID = this.p_info.getAD_Column_ID(columnName);
      return AD_Column_ID > 0 ? this.set_ValueOfColumnReturningBoolean(AD_Column_ID, value) : false;
   }

   public final void set_ValueOfColumn(int AD_Column_ID, Object value) {
      this.set_ValueOfColumnReturningBoolean(AD_Column_ID, value);
   }

   public final boolean set_ValueOfColumnReturningBoolean(int AD_Column_ID, Object value) {
      int index = this.p_info.getColumnIndex(AD_Column_ID);
      if (index < 0) {
         this.log.log(Level.SEVERE, "Not found - AD_Column_ID=" + AD_Column_ID);
      }

      String ColumnName = this.p_info.getColumnName(index);
      return ColumnName.equals("IsApproved") ? this.set_ValueNoCheck(ColumnName, value) : this.set_Value(index, value);
   }

   public final void set_CustomColumn(String columnName, Object value) {
      this.set_CustomColumnReturningBoolean(columnName, value);
   }

   public final boolean set_CustomColumnReturningBoolean(String columnName, Object value) {
      int poIndex = this.get_ColumnIndex(columnName);
      if (poIndex >= 0) {
         return this.set_Value(columnName, value);
      } else {
         if (this.m_custom == null) {
            this.m_custom = new HashMap();
         }

         String valueString = "NULL";
         if (value != null) {
            if (value instanceof Number) {
               valueString = value.toString();
            } else if (value instanceof Boolean) {
               valueString = (Boolean)value ? "'Y'" : "'N'";
            } else if (value instanceof Timestamp) {
               valueString = DB.TO_DATE((Timestamp)value, false);
            } else {
               valueString = DB.TO_STRING(value.toString());
            }
         }

         this.log.log(Level.INFO, columnName + "=" + valueString);
         this.m_custom.put(columnName, valueString);
         return true;
      }
   }

   private void set_Keys(String ColumnName, Object value) {
      for(int i = 0; i < this.m_IDs.length; ++i) {
         if (ColumnName.equals(this.m_KeyColumns[i])) {
            this.m_IDs[i] = value;
         }
      }

   }

   public int get_ColumnCount() {
      return this.p_info.getColumnCount();
   }

   public String get_ColumnName(int index) {
      return this.p_info.getColumnName(index);
   }

   protected String get_ColumnLabel(int index) {
      return this.p_info.getColumnLabel(index);
   }

   protected String get_ColumnDescription(int index) {
      return this.p_info.getColumnDescription(index);
   }

   protected boolean isColumnMandatory(int index) {
      return this.p_info.isColumnMandatory(index);
   }

   protected boolean isColumnUpdateable(int index) {
      return this.p_info.isColumnUpdateable(index);
   }

   protected void set_ColumnUpdateable(int index, boolean updateable) {
      this.p_info.setColumnUpdateable(index, updateable);
   }

   protected void setUpdateable(boolean updateable) {
      this.p_info.setUpdateable(updateable);
   }

   protected int get_ColumnDisplayType(int index) {
      return this.p_info.getColumnDisplayType(index);
   }

   protected Lookup get_ColumnLookup(int index) {
      return this.p_info.getColumnLookup(index);
   }

   public final int get_ColumnIndex(String columnName) {
      return this.p_info.getColumnIndex(columnName);
   }

   protected String get_DisplayValue(String columnName, boolean currentValue) {
      Object value = currentValue ? this.get_Value(columnName) : this.get_ValueOld(columnName);
      if (value == null) {
         return "./.";
      } else {
         String retValue = value.toString();
         int index = this.get_ColumnIndex(columnName);
         if (index < 0) {
            return retValue;
         } else {
            int displayType = this.get_ColumnDisplayType(index);
            if (!DisplayType.isText(displayType) && 20 != displayType) {
               if (DisplayType.isDate(displayType)) {
                  SimpleDateFormat format = DisplayType.getDateFormat(displayType);
                  return format.format(value);
               } else {
                  if (DisplayType.isNumeric(displayType)) {
                     DecimalFormat format = DisplayType.getNumberFormat(displayType);
                     format.format(value);
                  }

                  Lookup lookup = this.get_ColumnLookup(index);
                  return lookup != null ? lookup.getDisplay(value) : retValue;
               }
            } else {
               return retValue;
            }
         }
      }
   }

   public String getDisplayValue() {
      StringBuffer identifier = new StringBuffer();
      MTable table = MTable.get(this.getCtx(), this.get_Table_ID());
      table.getColumnsAsList().stream().sorted(Comparator.comparing(X_AD_Column::getSeqNo)).filter((entry) -> {
         return entry.isIdentifier() && this.get_Value(entry.getColumnName()) != null && !Util.isEmpty(this.get_DisplayValue(entry.getColumnName(), true));
      }).forEach((column) -> {
         String displayColumn = this.get_DisplayValue(column.getColumnName(), true);
         if (identifier.length() > 0) {
            identifier.append("_");
         }

         identifier.append(displayColumn);
      });
      if (identifier.length() == 0) {
         identifier.append("<").append(this.get_ID()).append(">");
      }

      return identifier.toString();
   }

   protected static void copyValues(PO from, PO to, int AD_Client_ID, int AD_Org_ID) {
      copyValues(from, to, true);
      to.setAD_Client_ID(AD_Client_ID);
      to.setAD_Org_ID(AD_Org_ID);
   }

   public static void copyValues(PO from, PO to) {
      copyValues(from, to, true);
   }

   public static void copyValues(PO from, PO to, boolean force) {
      CLogger var10000 = s_log;
      int var10001 = from.get_ID();
      var10000.fine("From ID=" + var10001 + " - To ID=" + to.get_ID());
      int i1;
      String colName;
      if (from.getClass() != to.getClass()) {
         for(i1 = 0; i1 < from.m_oldValues.length; ++i1) {
            if (!from.p_info.isVirtualColumn(i1) && !from.p_info.isKey(i1) && (from.p_info.isAllowCopy(i1) || force)) {
               colName = from.p_info.getColumnName(i1);
               if (!M_Element.isReservedColumnName(colName)) {
                  for(int i2 = 0; i2 < to.m_oldValues.length; ++i2) {
                     if (to.p_info.getColumnName(i2).equals(colName)) {
                        to.m_newValues[i2] = from.m_oldValues[i1];
                        break;
                     }
                  }
               }
            }
         }
      } else {
         for(i1 = 0; i1 < from.m_oldValues.length; ++i1) {
            if (!from.p_info.isVirtualColumn(i1) && !from.p_info.isKey(i1) && (from.p_info.isAllowCopy(i1) || force)) {
               colName = from.p_info.getColumnName(i1);
               if (!colName.startsWith("Created") && !colName.startsWith("Updated") && !colName.equals("IsActive") && !colName.equals("AD_Client_ID") && !colName.equals("AD_Org_ID") && !colName.equals("Processing") && !colName.equals("UUID")) {
                  to.m_newValues[i1] = from.m_oldValues[i1];
               }
            }
         }
      }

   }

   protected void load(int ID, String trxName) {
      this.log.finest("ID=" + ID);
      if (ID > 0) {
         this.setKeyInfo();
         this.m_IDs = new Object[]{ID};
         this.load(trxName);
      } else {
         this.loadDefaults();
         this.m_createNew = true;
         this.setKeyInfo();
         this.loadComplete(true);
      }

   }

   public boolean load(String trxName) {
      this.m_trxName = trxName;
      boolean success = true;
      StringBuffer sql = this.p_info.buildSelect();
      sql.append(" WHERE ").append(this.get_WhereClause(false));
      int size = this.get_ColumnCount();
      if (CLogMgt.isLevelFinest()) {
         this.log.finest(this.get_WhereClause(true));
      }

      PreparedStatement pstmt = null;
      ResultSet rs = null;

      try {
         pstmt = DB.prepareStatement(sql.toString(), this.m_trxName);

         for(int i = 0; i < this.m_IDs.length; ++i) {
            Object oo = this.m_IDs[i];
            if (oo instanceof Integer) {
               pstmt.setInt(i + 1, (Integer)this.m_IDs[i]);
            } else {
               pstmt.setString(i + 1, this.m_IDs[i].toString());
            }
         }

         rs = pstmt.executeQuery();
         if (rs.next()) {
            success = this.load(rs);
         } else {
            if (!this.log.getLevel().equals(Level.CONFIG)) {
               this.log.log(Level.WARNING, "NO Data found for " + this.get_WhereClause(true));
            }

            this.m_IDs = new Object[]{I_ZERO};
            success = false;
         }

         this.m_createNew = false;
         this.m_newValues = new Object[size];
      } catch (Exception var12) {
         String msg = "";
         if (this.m_trxName != null) {
            msg = "[" + this.m_trxName + "] - ";
         }

         msg = msg + this.get_WhereClause(true) + ", SQL=" + sql.toString();
         success = false;
         this.m_IDs = new Object[]{I_ZERO};
         this.log.log(Level.SEVERE, msg, var12);
      } finally {
         DB.close(rs, pstmt);
         rs = null;
         pstmt = null;
      }

      this.loadComplete(success);
      return success;
   }

   protected boolean load(ResultSet rs) {
      int size = this.get_ColumnCount();
      boolean success = true;
      this.log.finest("(rs)");

      for(int index = 0; index < size; ++index) {
         String columnName = this.p_info.getColumnName(index);
         Class<?> clazz = this.p_info.getColumnClass(index);
         int dt = this.p_info.getColumnDisplayType(index);
         if (!this.p_info.isVirtualColumn(index)) {
            CLogger var10000;
            try {
               if (clazz == Integer.class) {
                  this.m_oldValues[index] = this.decrypt(index, rs.getInt(columnName));
               } else if (clazz == BigDecimal.class) {
                  this.m_oldValues[index] = this.decrypt(index, rs.getBigDecimal(columnName));
               } else if (clazz == Boolean.class) {
                  this.m_oldValues[index] = "Y".equals(this.decrypt(index, rs.getString(columnName)));
               } else if (clazz == Timestamp.class) {
                  this.m_oldValues[index] = this.decrypt(index, rs.getTimestamp(columnName));
               } else if (!DisplayType.isLOB(dt) && (!DisplayType.isText(dt) || this.p_info.getFieldLength(index) <= 4000)) {
                  if (clazz == String.class) {
                     this.m_oldValues[index] = this.decrypt(index, rs.getString(columnName));
                  } else {
                     this.m_oldValues[index] = this.loadSpecial(rs, index);
                  }
               } else {
                  this.m_oldValues[index] = this.get_LOB(rs.getObject(columnName));
               }

               if (rs.wasNull() && this.m_oldValues[index] != null) {
                  this.m_oldValues[index] = null;
               }

               if (CLogMgt.isLevelAll()) {
                  var10000 = this.log;
                  String var11 = String.valueOf(index);
                  var10000.finest(var11 + ": " + this.p_info.getColumnName(index) + "(" + this.p_info.getColumnClass(index) + ") = " + this.m_oldValues[index]);
               }
            } catch (SQLException var9) {
               var9.printStackTrace();
               if (this.p_info.isVirtualColumn(index)) {
                  this.log.log(Level.FINER, "Virtual Column not loaded: " + columnName);
               } else {
                  var10000 = this.log;
                  Level var10001 = Level.SEVERE;
                  String var10002 = String.valueOf(index);
                  var10000.log(var10001, "(rs) - " + var10002 + ": " + this.p_info.getTableName() + "." + this.p_info.getColumnName(index) + " (" + this.p_info.getColumnClass(index) + ") - " + var9);
                  success = false;
               }
            }
         }
      }

      this.m_createNew = false;
      this.setKeyInfo();
      this.loadComplete(success);
      return success;
   }

   protected boolean load(HashMap<String, String> hmIn) {
      int size = this.get_ColumnCount();
      boolean success = true;
      this.log.finest("(hm)");

      for(int index = 0; index < size; ++index) {
         String columnName = this.p_info.getColumnName(index);
         String value = (String)hmIn.get(columnName);
         if (value != null) {
            Class<?> clazz = this.p_info.getColumnClass(index);
            int dt = this.p_info.getColumnDisplayType(index);

            CLogger var10000;
            try {
               if (clazz == Integer.class) {
                  this.m_oldValues[index] = Integer.valueOf(value);
               } else if (clazz == BigDecimal.class) {
                  this.m_oldValues[index] = new BigDecimal(value);
               } else if (clazz == Boolean.class) {
                  this.m_oldValues[index] = "Y".equals(value);
               } else if (clazz == Timestamp.class) {
                  this.m_oldValues[index] = Timestamp.valueOf(value);
               } else if (DisplayType.isLOB(dt)) {
                  this.m_oldValues[index] = null;
               } else if (clazz == String.class) {
                  this.m_oldValues[index] = value;
               } else {
                  this.m_oldValues[index] = null;
               }

               if (CLogMgt.isLevelAll()) {
                  var10000 = this.log;
                  String var12 = String.valueOf(index);
                  var10000.finest(var12 + ": " + this.p_info.getColumnName(index) + "(" + this.p_info.getColumnClass(index) + ") = " + this.m_oldValues[index]);
               }
            } catch (Exception var10) {
               if (this.p_info.isVirtualColumn(index)) {
                  this.log.log(Level.FINER, "Virtual Column not loaded: " + columnName);
               } else {
                  var10000 = this.log;
                  Level var10001 = Level.SEVERE;
                  String var10002 = String.valueOf(index);
                  var10000.log(var10001, "(ht) - " + var10002 + ": " + this.p_info.getTableName() + "." + this.p_info.getColumnName(index) + " (" + this.p_info.getColumnClass(index) + ") - " + var10);
                  success = false;
               }
            }
         }
      }

      this.m_createNew = false;
      this.setStandardDefaults();
      this.setKeyInfo();
      this.loadComplete(success);
      return success;
   }

   protected HashMap<String, String> get_HashMap() {
      HashMap<String, String> hmOut = new HashMap();
      int size = this.get_ColumnCount();

      for(int i = 0; i < size; ++i) {
         Object value = this.get_Value(i);
         if (value != null && !this.p_info.isVirtualColumn(i)) {
            int dt = this.p_info.getColumnDisplayType(i);
            Class<?> c = this.p_info.getColumnClass(i);
            String stringValue = null;
            if (c != Object.class && value != null && !value.equals(Null.NULL)) {
               if (!(value instanceof Integer) && !(value instanceof BigDecimal)) {
                  if (c == Boolean.class) {
                     boolean bValue = false;
                     if (value instanceof Boolean) {
                        bValue = (Boolean)value;
                     } else {
                        bValue = "Y".equals(value);
                     }

                     stringValue = bValue ? "Y" : "N";
                  } else if (value instanceof Timestamp) {
                     stringValue = value.toString();
                  } else if (c == String.class) {
                     stringValue = (String)value;
                  } else if (DisplayType.isLOB(dt)) {
                  }
               } else {
                  stringValue = value.toString();
               }
            }

            if (stringValue != null) {
               hmOut.put(this.p_info.getColumnName(i), stringValue);
            }
         }
      }

      if (this.m_custom != null) {
         Iterator it = this.m_custom.keySet().iterator();

         while(it.hasNext()) {
            String column = (String)it.next();
            String value = (String)this.m_custom.get(column);
            if (value != null) {
               hmOut.put(column, value);
            }
         }

         this.m_custom = null;
      }

      return hmOut;
   }

   protected Object loadSpecial(ResultSet rs, int index) throws SQLException {
      CLogger var10000 = this.log;
      String var10001 = this.p_info.getColumnName(index);
      var10000.finest("(NOP) - " + var10001);
      return null;
   }

   protected void loadComplete(boolean success) {
   }

   protected void loadDefaults() {
      this.setStandardDefaults();
   }

   protected void setStandardDefaults() {
      int size = this.get_ColumnCount();

      for(int i = 0; i < size; ++i) {
         if (!this.p_info.isVirtualColumn(i)) {
            String colName = this.p_info.getColumnName(i);
            if (colName.endsWith("tedBy")) {
               this.m_newValues[i] = Env.getContextAsInt(this.p_ctx, "#AD_User_ID");
            } else if (!colName.equals("Created") && !colName.equals("Updated")) {
               if (colName.equals(this.p_info.getTableName() + "_ID")) {
                  this.m_newValues[i] = I_ZERO;
               } else if (colName.equals("IsActive")) {
                  this.m_newValues[i] = Boolean.TRUE;
               } else if (colName.equals("AD_Client_ID")) {
                  this.m_newValues[i] = Env.getAD_Client_ID(this.p_ctx);
               } else if (colName.equals("AD_Org_ID")) {
                  this.m_newValues[i] = Env.getAD_Org_ID(this.p_ctx);
               } else if (colName.equals("Processed")) {
                  this.m_newValues[i] = Boolean.FALSE;
               } else if (colName.equals("Processing")) {
                  this.m_newValues[i] = Boolean.FALSE;
               } else if (colName.equals("Posted")) {
                  this.m_newValues[i] = Boolean.FALSE;
               } else {
                  this.m_newValues[i] = this.getDefaultValue(this.get_ColumnName(i));
               }
            } else {
               this.m_newValues[i] = new Timestamp(System.currentTimeMillis());
            }
         }
      }

   }

   public Object getDefaultValue(String columnName) {
      int columnIndex = this.get_ColumnIndex(columnName);
      return this.getDefaultValue(columnIndex);
   }

   public Object getDefaultValue(int columnIndex) {
      String defaultValue = Env.parseContext(Env.getCtx(), 0, this.p_info.getDefaultLogic(columnIndex), true, false);
      if (defaultValue != null && defaultValue.length() > 0) {
         POInfoColumn infoColumn = this.p_info.getColumn(columnIndex);
         GridFieldVO valueObject = GridFieldVO.createStdField(Env.getCtx(), 0, 0, 0, 0, false, false, false);
         valueObject.isProcess = true;
         valueObject.IsUpdateable = infoColumn.IsUpdateable;
         valueObject.AD_Column_ID = infoColumn.AD_Column_ID;
         valueObject.AD_Table_ID = this.p_info.getAD_Table_ID();
         valueObject.ColumnName = infoColumn.ColumnName;
         valueObject.displayType = infoColumn.DisplayType;
         valueObject.AD_Reference_Value_ID = infoColumn.AD_Reference_Value_ID;
         valueObject.IsMandatory = infoColumn.IsMandatory;
         valueObject.IsKey = infoColumn.IsKey;
         valueObject.DefaultValue = defaultValue;
         valueObject.ValueMin = infoColumn.ValueMin;
         valueObject.ValueMax = infoColumn.ValueMin;
         valueObject.ValidationCode = infoColumn.ValidationCode;
         valueObject.Description = infoColumn.ColumnDescription;
         valueObject.ColumnSQL = infoColumn.ColumnSQL;
         valueObject.Header = infoColumn.ColumnLabel;
         valueObject.initFinish();
         GridField field = new GridField(valueObject);
         return field.getDefault();
      } else {
         return null;
      }
   }

   private void setKeyInfo() {
      for(int i = 0; i < this.p_info.getColumnCount(); ++i) {
         if (this.p_info.isKey(i)) {
            String ColumnName = this.p_info.getColumnName(i);
            this.m_KeyColumns = new String[]{ColumnName};
            if (this.p_info.getColumnName(i).endsWith("_ID")) {
               Integer ii = (Integer)this.get_Value(i);
               if (ii == null) {
                  this.m_IDs = new Object[]{I_ZERO};
               } else {
                  this.m_IDs = new Object[]{ii};
               }

               this.log.finest("(PK) " + ColumnName + "=" + ii);
            } else {
               Object oo = this.get_Value(i);
               if (oo == null) {
                  this.m_IDs = new Object[]{null};
               } else {
                  this.m_IDs = new Object[]{oo};
               }

               this.log.finest("(PK) " + ColumnName + "=" + oo);
            }

            return;
         }
      }

      ArrayList<String> columnNames = new ArrayList();

      int size;
      for(size = 0; size < this.p_info.getColumnCount(); ++size) {
         if (this.p_info.isColumnParent(size)) {
            columnNames.add(this.p_info.getColumnName(size));
         }
      }

      size = columnNames.size();
      if (size == 0) {
         throw new IllegalStateException("No PK nor FK - " + this.p_info.getTableName());
      } else {
         this.m_IDs = new Object[size];
         this.m_KeyColumns = new String[size];

         for(int i = 0; i < size; ++i) {
            this.m_KeyColumns[i] = (String)columnNames.get(i);
            if (this.m_KeyColumns[i].endsWith("_ID")) {
               Integer ii = null;

               try {
                  ii = (Integer)this.get_Value(this.m_KeyColumns[i]);
               } catch (Exception var6) {
                  this.log.log(Level.SEVERE, "", var6);
               }

               if (ii != null) {
                  this.m_IDs[i] = ii;
               }
            } else {
               this.m_IDs[i] = this.get_Value(this.m_KeyColumns[i]);
            }

            String var10001 = this.m_KeyColumns[i];
            this.log.finest("(FK) " + var10001 + "=" + this.m_IDs[i]);
         }

      }
   }

   protected boolean isMandatoryOK() {
      int size = this.get_ColumnCount();

      for(int i = 0; i < size; ++i) {
         if (this.p_info.isColumnMandatory(i) && !this.p_info.isVirtualColumn(i) && (this.get_Value(i) == null || this.get_Value(i).equals(Null.NULL))) {
            this.log.info(this.p_info.getColumnName(i));
            return false;
         }
      }

      return true;
   }

   protected final void setAD_Client_ID(int AD_Client_ID) {
      this.set_ValueNoCheck("AD_Client_ID", AD_Client_ID);
   }

   public final int getAD_Client_ID() {
      Integer ii = (Integer)this.get_Value("AD_Client_ID");
      return ii == null ? 0 : ii;
   }

   public final void setAD_Org_ID(int AD_Org_ID) {
      this.set_ValueNoCheck("AD_Org_ID", AD_Org_ID);
   }

   public int getAD_Org_ID() {
      Integer ii = (Integer)this.get_Value("AD_Org_ID");
      return ii == null ? 0 : ii;
   }

   protected void setClientOrg(int AD_Client_ID, int AD_Org_ID) {
      if (AD_Client_ID != this.getAD_Client_ID()) {
         this.setAD_Client_ID(AD_Client_ID);
      }

      if (AD_Org_ID != this.getAD_Org_ID()) {
         this.setAD_Org_ID(AD_Org_ID);
      }

   }

   protected void setClientOrg(PO po) {
      this.setClientOrg(po.getAD_Client_ID(), po.getAD_Org_ID());
   }

   public final void setIsActive(boolean active) {
      this.set_Value("IsActive", active);
   }

   public final boolean isActive() {
      Boolean bb = (Boolean)this.get_Value("IsActive");
      return bb != null ? bb : false;
   }

   public final Timestamp getCreated() {
      return (Timestamp)this.get_Value("Created");
   }

   public final Timestamp getUpdated() {
      return (Timestamp)this.get_Value("Updated");
   }

   public final int getCreatedBy() {
      Integer ii = (Integer)this.get_Value("CreatedBy");
      return ii == null ? 0 : ii;
   }

   public final int getUpdatedBy() {
      Integer ii = (Integer)this.get_Value("UpdatedBy");
      return ii == null ? 0 : ii;
   }

   protected final void setUpdatedBy(int AD_User_ID) {
      this.set_ValueNoCheck("UpdatedBy", AD_User_ID);
   }

   public String get_Translation(String columnName, String AD_Language) {
      if (columnName != null && AD_Language != null && this.m_IDs.length <= 1) {
         String retValue = null;
         if (!Env.isBaseLanguage(AD_Language, this.get_TableName()) && this.p_info.isColumnTranslated(this.p_info.getColumnIndex(columnName))) {
            int ID = (Integer)this.m_IDs[0];
            StringBuffer sql = (new StringBuffer("SELECT ")).append(columnName).append(" FROM ").append(this.p_info.getTableName()).append("_Trl WHERE ").append(this.m_KeyColumns[0]).append("=?").append(" AND AD_Language=?");
            retValue = DB.getSQLValueString(this.get_TrxName(), sql.toString(), new Object[]{ID, AD_Language});
         }

         if (retValue == null) {
            Object val = this.get_Value(columnName);
            retValue = val != null ? val.toString() : null;
         }

         return retValue;
      } else {
         throw new IllegalArgumentException("ColumnName=" + columnName + ", AD_Language=" + AD_Language + ", ID.length=" + this.m_IDs.length + ", ID=" + this.m_IDs[0]);
      }
   }

   public String get_Translation(String columnName) {
      return this.get_Translation(columnName, Env.getAD_Language(this.getCtx()));
   }

   public boolean is_new() {
      if (this.m_createNew) {
         return true;
      } else {
         for(int i = 0; i < this.m_IDs.length; ++i) {
            if (!this.m_IDs[i].equals(I_ZERO) && this.m_IDs[i] != Null.NULL) {
               return false;
            }
         }

         return true;
      }
   }

   public boolean save() {
      CLogger.resetLast();
      boolean newRecord = this.is_new();
      if (!newRecord && !this.is_Changed()) {
         this.log.fine("Nothing changed - " + this.p_info.getTableName());
         return true;
      } else if (this.getAD_Org_ID() != 0 || this.get_AccessLevel() != 1 && (this.get_AccessLevel() != 3 || !MClientShare.isOrgLevelOnly(this.getAD_Client_ID(), this.get_Table_ID()))) {
         if (this.getAD_Org_ID() != 0) {
            boolean reset = this.get_AccessLevel() == 4;
            if (!reset && MClientShare.isClientLevelOnly(this.getAD_Client_ID(), this.get_Table_ID())) {
               reset = this.get_AccessLevel() == 2 || this.get_AccessLevel() == 6 || this.get_AccessLevel() == 7 || this.get_AccessLevel() == 3;
            }

            if (reset) {
               this.log.warning("Set Org to 0");
               this.setAD_Org_ID(0);
            }
         }

         Trx localTrx = null;
         Trx trx = null;
         Savepoint savepoint = null;
         if (this.m_trxName == null) {
            this.m_trxName = Trx.createTrxName("POSave");
            localTrx = Trx.get(this.m_trxName, true);
         } else {
            trx = Trx.get(this.m_trxName, false);
            if (trx == null) {
               trx = Trx.get(this.m_trxName, true);
               String var10001 = this.m_trxName;
               this.log.severe("Transaction closed or never opened (" + var10001 + ") => starting now --> " + this.toString());
            }
         }

         try {
            if (localTrx == null) {
               savepoint = trx.setSavepoint((String)null);
            }

            if (!this.beforeSave(newRecord)) {
               this.log.warning("beforeSave failed - " + this.toString());
               if (localTrx != null) {
                  localTrx.rollback(true);
                  localTrx.close();
                  this.m_trxName = null;
               } else {
                  trx.rollback(savepoint);
                  savepoint = null;
               }

               return false;
            }
         } catch (Exception var30) {
            this.log.log(Level.WARNING, "beforeSave - " + this.toString(), var30);
            this.log.saveError("Error", var30, false);
            if (localTrx != null) {
               localTrx.rollback();
               localTrx.close();
               this.m_trxName = null;
            } else if (savepoint != null) {
               try {
                  trx.rollback(savepoint);
               } catch (SQLException var25) {
               }

               savepoint = null;
            }

            return false;
         }

         boolean b;
         try {
            String errorMsg = ModelValidationEngine.get().fireModelChange(this, newRecord ? 1 : 2);
            if (errorMsg == null) {
               boolean var7;
               if (newRecord) {
                  b = this.saveNew();
                  if (b) {
                     if (localTrx != null) {
                        var7 = localTrx.commit(true);
                        return var7;
                     }

                     var7 = b;
                     return var7;
                  }

                  if (localTrx != null) {
                     localTrx.rollback(true);
                  } else {
                     trx.rollback(savepoint);
                  }

                  var7 = b;
                  return var7;
               }

               b = this.saveUpdate();
               if (b) {
                  if (localTrx != null) {
                     var7 = localTrx.commit(true);
                     return var7;
                  }

                  var7 = b;
                  return var7;
               }

               if (localTrx != null) {
                  localTrx.rollback(true);
               } else {
                  trx.rollback(savepoint);
               }

               var7 = b;
               return var7;
            }

            this.log.warning("Validation failed - " + errorMsg);
            this.log.saveError("Error", errorMsg);
            if (localTrx != null) {
               localTrx.rollback(true);
               this.m_trxName = null;
            } else {
               trx.rollback(savepoint);
            }

            b = false;
         } catch (Exception var28) {
            this.log.saveError("Error", var28);
            if (localTrx != null) {
               localTrx.rollback();
            } else if (savepoint != null) {
               try {
                  trx.rollback(savepoint);
               } catch (SQLException var27) {
               }

               savepoint = null;
            }

            b = false;
            return b;
         } finally {
            try {
               if (localTrx != null) {
                  localTrx.close();
                  this.m_trxName = null;
               } else {
                  if (savepoint != null) {
                     trx.releaseSavepoint(savepoint);
                  }

                  savepoint = null;
                  trx = null;
               }
            } catch (SQLException var26) {
               this.log.saveError("Error", var26);
            }

         }

         return b;
      } else {
         this.log.saveError("FillMandatory", Msg.getElement(this.getCtx(), "AD_Org_ID"));
         return false;
      }
   }

   public void saveEx() throws AdempiereException {
      if (!this.save()) {
         String msg = null;
         ValueNamePair err = CLogger.retrieveError();
         if (err != null) {
            msg = err.getName();
         }

         if (msg == null || msg.length() == 0) {
            msg = "SaveError";
         }

         throw new AdempiereException(msg);
      }
   }

   private boolean saveFinish(boolean newRecord, boolean success) {
      if (!this.isDirectLoad) {
         if (success) {
            if (newRecord) {
               this.insertTranslations();
            } else {
               this.updateTranslations();
            }
         }

         try {
            success = this.afterSave(newRecord, success);
            if (success && newRecord) {
               this.insertTreeNode();
            } else if (success && !newRecord) {
               this.updateTreeNode();
            }
         } catch (Exception var6) {
            this.log.log(Level.WARNING, "afterSave", var6);
            this.log.saveError("Error", var6, false);
            success = false;
         }
      }

      if (success && !this.isDirectLoad) {
         String errorMsg = ModelValidationEngine.get().fireModelChange(this, newRecord ? (this.isReplication() ? 7 : 4) : (this.isReplication() ? 8 : 5));
         this.setReplication(false);
         if (errorMsg != null) {
            this.log.saveError("Error", errorMsg);
            success = false;
         }
      }

      if (success && !this.isDirectLoad) {
         if (s_docWFMgr == null) {
            try {
               Class.forName("org.compiere.wf.DocWorkflowManager");
            } catch (Exception var5) {
            }
         }

         if (s_docWFMgr != null) {
            s_docWFMgr.process(this, this.p_info.getAD_Table_ID());
         }
      }

      if (success) {
         int size = this.p_info.getColumnCount();

         for(int i = 0; i < size; ++i) {
            if (this.m_newValues[i] != null) {
               if (this.m_newValues[i] == Null.NULL) {
                  this.m_oldValues[i] = null;
               } else {
                  this.m_oldValues[i] = this.m_newValues[i];
               }
            }
         }

         this.m_newValues = new Object[size];
      }

      this.m_createNew = false;
      if (!newRecord) {
         CacheMgt.get().reset(this.p_info.getTableName());
      }

      return success;
   }

   public boolean save(String trxName) {
      this.set_TrxName(trxName);
      return this.save();
   }

   public void saveReplica(boolean isFromReplication) throws AdempiereException {
      this.setReplication(isFromReplication);
      this.saveEx();
   }

   public void saveEx(String trxName) throws AdempiereException {
      this.set_TrxName(trxName);
      this.saveEx();
   }

   public boolean is_Changed() {
      int size = this.get_ColumnCount();

      for(int i = 0; i < size; ++i) {
         if (this.is_ValueChanged(i)) {
            return true;
         }
      }

      if (this.m_custom != null && this.m_custom.size() > 0) {
         return true;
      } else {
         return false;
      }
   }

   protected boolean beforeSave(boolean newRecord) {
      return true;
   }

   protected boolean afterSave(boolean newRecord, boolean success) {
      return success;
   }

   protected boolean saveUpdate() {
      String where = this.get_WhereClause(true);
      boolean changes = false;
      StringBuffer sql = new StringBuffer("UPDATE ");
      sql.append(this.p_info.getTableName()).append(" SET ");
      boolean updated = false;
      boolean updatedBy = false;
      this.lobReset();
      String columnName = "UUID";
      if (this.p_info.getColumnIndex(columnName) != -1) {
         String value = this.get_ValueAsString(columnName);
         if (value == null || value.length() == 0) {
            value = DB.getUUID(this.m_trxName);
            this.set_ValueNoCheck(columnName, value);
         }
      }

      MSession session = MSession.get(this.p_ctx, false, false);
      if (session == null) {
         this.log.fine("No Session found");
      } else if (Ini.isPropertyBool("LogMigrationScript")) {
         session.logMigration(this, this.p_info, "U");
      }

      int AD_ChangeLog_ID = 0;
      int size = this.get_ColumnCount();

      int i;
      int dt;
      for(i = 0; i < size; ++i) {
         columnName = this.p_info.getColumnName(i);
         Object value = this.m_newValues[i];
         if (value != null && !this.p_info.isVirtualColumn(i)) {
            Class<?> c = this.p_info.getColumnClass(i);
            dt = this.p_info.getColumnDisplayType(i);
            if (columnName.equals("UpdatedBy")) {
               if (updatedBy) {
                  continue;
               }

               updatedBy = true;
            } else if (columnName.equals("Updated")) {
               if (updated) {
                  continue;
               }

               updated = true;
            }

            if (DisplayType.isLOB(dt) || DisplayType.isText(dt) && this.p_info.getFieldLength(i) > 4000) {
               this.lobAdd(value, i, dt);
               if (!changes && !updatedBy) {
                  int AD_User_ID = Env.getContextAsInt(this.p_ctx, "#AD_User_ID");
                  this.set_ValueNoCheck("UpdatedBy", AD_User_ID);
                  sql.append("UpdatedBy=").append(AD_User_ID);
                  changes = true;
                  updatedBy = true;
               }
            } else {
               if (columnName.equals("DocumentNo") && value instanceof String) {
                  String strValue = (String)value;
                  if (strValue.startsWith("<") && strValue.endsWith(">")) {
                     value = null;
                     int AD_Client_ID = this.getAD_Client_ID();
                     int index = this.p_info.getColumnIndex("C_DocTypeTarget_ID");
                     if (index == -1) {
                        index = this.p_info.getColumnIndex("C_DocType_ID");
                     }

                     if (index != -1) {
                        value = DB.getDocumentNo(this.get_ValueAsInt(index), this.m_trxName, false, this);
                     }

                     if (value == null) {
                        value = DB.getDocumentNo(AD_Client_ID, this.p_info.getTableName(), this.m_trxName, this);
                     }
                  } else {
                     Object var10001 = this.m_oldValues[i];
                     this.log.warning("DocumentNo updated: " + var10001 + " -> " + value);
                  }
               }

               if (changes) {
                  sql.append(", ");
               }

               changes = true;
               sql.append(columnName).append("=");
               if (value == Null.NULL) {
                  sql.append("NULL");
               } else if (!(value instanceof Integer) && !(value instanceof BigDecimal)) {
                  if (c == Boolean.class) {
                     boolean bValue = false;
                     if (value instanceof Boolean) {
                        bValue = (Boolean)value;
                     } else {
                        bValue = "Y".equals(value);
                     }

                     sql.append(this.encrypt(i, bValue ? "'Y'" : "'N'"));
                  } else if (value instanceof Timestamp) {
                     sql.append(DB.TO_DATE((Timestamp)this.encrypt(i, value), this.p_info.getColumnDisplayType(i) == 15));
                  } else if (value.toString().length() == 0) {
                     sql.append(DB.TO_STRING(value.toString()));
                  } else {
                     sql.append(this.encrypt(i, DB.TO_STRING(value.toString())));
                  }
               } else {
                  sql.append(this.encrypt(i, value));
               }

               if (session != null && this.m_IDs.length == 1 && this.p_info.isAllowLogging(i) && !this.p_info.isEncrypted(i) && !this.p_info.isVirtualColumn(i) && !"Password".equals(columnName) && !this.p_info.getTableName().equals("AD_Session")) {
                  Object oldV = this.m_oldValues[i];
                  Object newV = value;
                  if (oldV != null && oldV == Null.NULL) {
                     oldV = null;
                  }

                  if (value != null && value == Null.NULL) {
                     newV = null;
                  }

                  MChangeLog cLog = session.changeLog(this.m_trxName, AD_ChangeLog_ID, this.p_info.getAD_Table_ID(), this.p_info.getColumn(i).AD_Column_ID, this.get_ID(), this.getAD_Client_ID(), this.getAD_Org_ID(), oldV, newV, "U");
                  if (cLog != null) {
                     AD_ChangeLog_ID = cLog.getAD_ChangeLog_ID();
                  }
               }
            }
         }
      }

      if (this.m_custom != null) {
         Iterator it = this.m_custom.keySet().iterator();

         while(it.hasNext()) {
            if (changes) {
               sql.append(", ");
            }

            changes = true;
            String column = (String)it.next();
            String value = (String)this.m_custom.get(column);
            dt = this.p_info.getColumnIndex(column);
            sql.append(column).append("=").append(this.encrypt(dt, value));
         }

         this.m_custom = null;
      }

      if (changes) {
         String var29;
         if (this.m_trxName == null) {
            CLogger var10000 = this.log;
            var29 = this.p_info.getTableName();
            var10000.fine(var29 + "." + where);
         } else {
            var29 = this.m_trxName;
            this.log.fine("[" + var29 + "] - " + this.p_info.getTableName() + "." + where);
         }

         if (!updated) {
            Timestamp now = new Timestamp(System.currentTimeMillis());
            this.set_ValueNoCheck("Updated", now);
            sql.append(",Updated=").append(DB.TO_DATE(now, false));
         }

         if (!updatedBy) {
            i = Env.getContextAsInt(this.p_ctx, "#AD_User_ID");
            this.set_ValueNoCheck("UpdatedBy", i);
            sql.append(",UpdatedBy=").append(i);
         }

         sql.append(" WHERE ").append(where);
         this.log.finest(sql.toString());
         if (this.isUseTimeoutForUpdate()) {
            i = DB.executeUpdateEx(sql.toString(), this.m_trxName, 10);
         } else {
            i = DB.executeUpdate(sql.toString(), this.m_trxName);
         }

         boolean ok = i == 1;
         if (ok) {
            ok = this.lobSave();
         } else if (this.m_trxName == null) {
            this.log.log(Level.WARNING, "#" + i + " - " + this.p_info.getTableName() + "." + where);
         } else {
            this.log.log(Level.WARNING, "#" + i + " - [" + this.m_trxName + "] - " + this.p_info.getTableName() + "." + where);
         }

         return this.saveFinish(false, ok);
      } else {
         return this.saveFinish(false, true);
      }
   }

   private boolean isUseTimeoutForUpdate() {
      return "true".equalsIgnoreCase(System.getProperty("org.adempiere.po.useTimeoutForUpdate", "false")) && DB.getDatabase().isQueryTimeoutSupported();
   }

   private boolean saveNew() {
      if (this.m_IDs.length == 1 && this.p_info.hasKeyColumn() && this.m_KeyColumns[0].endsWith("_ID") && (!this.isDirectLoad || this.get_ID() <= 0)) {
         int no = this.saveNew_getID();
         if (no <= 0) {
            no = DB.getNextID(this.getAD_Client_ID(), this.p_info.getTableName(), this.m_trxName);
         }

         if (this.isReplication() && this.get_ID() > 0) {
            no = this.get_ID();
         }

         if (no <= 0) {
            this.log.severe("No NextID (" + no + ")");
            return this.saveFinish(true, false);
         }

         this.m_IDs[0] = no;
         this.set_ValueNoCheck(this.m_KeyColumns[0], this.m_IDs[0]);
      }

      String var10001;
      if (this.m_trxName == null) {
         CLogger var10000 = this.log;
         var10001 = this.p_info.getTableName();
         var10000.fine(var10001 + " - " + this.get_WhereClause(true));
      } else {
         var10001 = this.m_trxName;
         this.log.fine("[" + var10001 + "] - " + this.p_info.getTableName() + " - " + this.get_WhereClause(true));
      }

      String columnName = "DocumentNo";
      int index = this.p_info.getColumnIndex(columnName);
      String value;
      int AD_ChangeLog_ID;
      if (index != -1 && this.p_info.getColumn(index).ColumnSQL == null) {
         value = (String)this.get_Value(index);
         if (value != null && value.startsWith("<") && value.endsWith(">")) {
            value = null;
         }

         if (value == null || value.length() == 0) {
            AD_ChangeLog_ID = this.p_info.getColumnIndex("C_DocTypeTarget_ID");
            if (AD_ChangeLog_ID == -1) {
               AD_ChangeLog_ID = this.p_info.getColumnIndex("C_DocType_ID");
            }

            if (AD_ChangeLog_ID != -1) {
               value = DB.getDocumentNo(this.get_ValueAsInt(AD_ChangeLog_ID), this.m_trxName, false, this);
            }

            if (value == null) {
               value = DB.getDocumentNo(this.getAD_Client_ID(), this.p_info.getTableName(), this.m_trxName, this);
            }

            this.set_ValueNoCheck(columnName, value);
         }
      }

      columnName = "Value";
      index = this.p_info.getColumnIndex(columnName);
      if (index != -1) {
         value = (String)this.get_Value(index);
         if (value == null || value.length() == 0) {
            value = DB.getDocumentNo(this.getAD_Client_ID(), this.p_info.getTableName(), this.m_trxName, this);
            this.set_ValueNoCheck(columnName, value);
         }
      }

      columnName = "UUID";
      if (this.p_info.getColumnIndex(columnName) != -1) {
         value = this.get_ValueAsString(columnName);
         if (Util.isEmpty(value) || !this.isDirectLoad && !this.isReplication()) {
            value = DB.getUUID(this.m_trxName);
            this.set_ValueNoCheck(columnName, value);
         }
      }

      this.lobReset();
      MSession session = MSession.get(this.p_ctx, false, false);
      if (session == null) {
         this.log.fine("No Session found");
      } else if (Ini.isPropertyBool("LogMigrationScript")) {
         session.logMigration(this, this.p_info, "I");
      }

      AD_ChangeLog_ID = 0;
      StringBuffer sqlInsert = new StringBuffer("INSERT INTO ");
      sqlInsert.append(this.p_info.getTableName()).append(" (");
      StringBuffer sqlValues = new StringBuffer(") VALUES (");
      int size = this.get_ColumnCount();
      boolean doComma = false;

      int i;
      for(i = 0; i < size; ++i) {
         Object value = this.get_Value(i);
         if (value != null && !this.p_info.isVirtualColumn(i)) {
            int dt = this.p_info.getColumnDisplayType(i);
            if (DisplayType.isLOB(dt) || DisplayType.isText(dt) && this.p_info.getFieldLength(i) > 4000) {
               this.lobAdd(value, i, dt);
            } else {
               if (doComma) {
                  sqlInsert.append(",");
                  sqlValues.append(",");
               } else {
                  doComma = true;
               }

               sqlInsert.append(this.p_info.getColumnName(i));
               Class c = this.p_info.getColumnClass(i);

               try {
                  if (c == Object.class) {
                     sqlValues.append(this.saveNewSpecial(value, i));
                  } else if (value != null && !value.equals(Null.NULL)) {
                     if (!(value instanceof Integer) && !(value instanceof BigDecimal)) {
                        if (c == Boolean.class) {
                           boolean bValue = false;
                           if (value instanceof Boolean) {
                              bValue = (Boolean)value;
                           } else {
                              bValue = "Y".equals(value);
                           }

                           sqlValues.append(this.encrypt(i, bValue ? "'Y'" : "'N'"));
                        } else if (value instanceof Timestamp) {
                           sqlValues.append(DB.TO_DATE((Timestamp)this.encrypt(i, value), this.p_info.getColumnDisplayType(i) == 15));
                        } else if (c == String.class) {
                           sqlValues.append(this.encrypt(i, DB.TO_STRING((String)value)));
                        } else if (DisplayType.isLOB(dt)) {
                           sqlValues.append("null");
                        } else {
                           sqlValues.append(this.saveNewSpecial(value, i));
                        }
                     } else {
                        sqlValues.append(this.encrypt(i, value));
                     }
                  } else {
                     sqlValues.append("NULL");
                  }
               } catch (Exception var15) {
                  String msg = "";
                  if (this.m_trxName != null) {
                     msg = "[" + this.m_trxName + "] - ";
                  }

                  msg = msg + this.p_info.toString(i) + " - Value=" + value + "(" + (value == null ? "null" : value.getClass().getName()) + ")";
                  this.log.log(Level.SEVERE, msg, var15);
                  throw new DBException(var15);
               }

               String insertLog = MSysConfig.getValue("SYSTEM_INSERT_CHANGELOG", "Y", this.getAD_Client_ID());
               if (session != null && this.m_IDs.length == 1 && this.p_info.isAllowLogging(i) && !this.p_info.isEncrypted(i) && !this.p_info.isVirtualColumn(i) && !"Password".equals(columnName) && !this.p_info.getTableName().equals("AD_Session") && (insertLog.equalsIgnoreCase("Y") || insertLog.equalsIgnoreCase("K") && this.p_info.getColumn(i).IsKey)) {
                  MChangeLog cLog = session.changeLog(this.m_trxName, AD_ChangeLog_ID, this.p_info.getAD_Table_ID(), this.p_info.getColumn(i).AD_Column_ID, this.get_ID(), this.getAD_Client_ID(), this.getAD_Org_ID(), (Object)null, value, "I");
                  if (cLog != null) {
                     AD_ChangeLog_ID = cLog.getAD_ChangeLog_ID();
                  }
               }
            }
         }
      }

      String msg;
      if (this.m_custom != null) {
         Iterator it = this.m_custom.keySet().iterator();

         while(it.hasNext()) {
            String column = (String)it.next();
            index = this.p_info.getColumnIndex(column);
            msg = (String)this.m_custom.get(column);
            if (doComma) {
               sqlInsert.append(",");
               sqlValues.append(",");
            } else {
               doComma = true;
            }

            sqlInsert.append(column);
            sqlValues.append(this.encrypt(index, msg));
         }

         this.m_custom = null;
      }

      sqlInsert.append(sqlValues).append(")");
      i = DB.executeUpdate(sqlInsert.toString(), this.m_trxName);
      boolean ok = i == 1;
      if (ok) {
         ok = this.lobSave();
         if (!this.load(this.m_trxName)) {
            if (this.m_trxName == null) {
               this.log.log(Level.SEVERE, "reloading");
            } else {
               this.log.log(Level.SEVERE, "[" + this.m_trxName + "] - reloading");
            }

            ok = false;
         }
      } else {
         msg = "Not inserted - ";
         if (CLogMgt.isLevelFiner()) {
            msg = msg + sqlInsert.toString();
         } else {
            msg = msg + this.get_TableName();
         }

         if (this.m_trxName == null) {
            this.log.log(Level.WARNING, msg);
         } else {
            this.log.log(Level.WARNING, "[" + this.m_trxName + "]" + msg);
         }
      }

      return this.saveFinish(true, ok);
   }

   protected int saveNew_getID() {
      return this.get_ID() < 999999 ? this.get_ID() : 0;
   }

   public String get_WhereClause(boolean withValues) {
      StringBuffer sb = new StringBuffer();

      for(int i = 0; i < this.m_IDs.length; ++i) {
         if (i != 0) {
            sb.append(" AND ");
         }

         sb.append(this.m_KeyColumns[i]).append("=");
         if (withValues) {
            if (this.m_KeyColumns[i].endsWith("_ID")) {
               sb.append(this.m_IDs[i]);
            } else {
               sb.append("'").append(this.m_IDs[i]).append("'");
            }
         } else {
            sb.append("?");
         }
      }

      return sb.toString();
   }

   protected String saveNewSpecial(Object value, int index) {
      String colName = this.p_info.getColumnName(index);
      String colClass = this.p_info.getColumnClass(index).toString();
      String colValue = value == null ? "null" : value.getClass().toString();
      this.log.log(Level.SEVERE, "Unknown class for column " + colName + " (" + colClass + ") - Value=" + colValue);
      return value == null ? "NULL" : value.toString();
   }

   private Object encrypt(int index, Object xx) {
      if (xx == null) {
         return null;
      } else {
         return index != -1 && this.p_info.isEncrypted(index) ? SecureEngine.encrypt(xx) : xx;
      }
   }

   private Object decrypt(int index, Object yy) {
      if (yy == null) {
         return null;
      } else {
         return index != -1 && this.p_info.isEncrypted(index) ? SecureEngine.decrypt(yy) : yy;
      }
   }

   public boolean delete(boolean force) {
      CLogger.resetLast();
      if (this.is_new()) {
         return true;
      } else {
         int AD_Table_ID = this.p_info.getAD_Table_ID();
         int Record_ID = this.get_ID();
         if (!force) {
            int clientId = Env.getAD_Client_ID(this.p_ctx);
            if (clientId > 0 && clientId != this.getAD_Client_ID()) {
               this.log.warning("Record is other client");
               this.log.saveError("CannotDeleteRecordOfAnotherClient", "", false);
               return false;
            }

            int iProcessed = this.get_ColumnIndex("Processed");
            if (iProcessed != -1) {
               Boolean processed = (Boolean)this.get_Value(iProcessed);
               if (processed != null && processed) {
                  this.log.warning("Record processed");
                  this.log.saveError("Processed", "Processed", false);
                  return false;
               }
            }
         }

         Trx localTrx = null;
         boolean success = false;

         try {
            String localTrxName = this.m_trxName;
            if (localTrxName == null) {
               localTrxName = Trx.createTrxName("POdel");
               localTrx = Trx.get(localTrxName, true);
               this.m_trxName = localTrxName;
            }

            boolean var8;
            try {
               if (!this.beforeDelete()) {
                  this.log.warning("beforeDelete failed");
                  boolean var28 = false;
                  return var28;
               }
            } catch (Exception var23) {
               this.log.log(Level.WARNING, "beforeDelete", var23);
               this.log.saveError("Error", var23, false);
               var8 = false;
               return var8;
            }

            String errorMsg = PO_Record.exists(AD_Table_ID, Record_ID, this.m_trxName);
            if (errorMsg != null) {
               this.log.saveError("CannotDelete", errorMsg);
               var8 = false;
               return var8;
            } else {
               errorMsg = ModelValidationEngine.get().fireModelChange(this, this.isReplication() ? 9 : 3);
               this.setReplication(false);
               if (errorMsg != null) {
                  this.log.saveError("Error", errorMsg);
                  var8 = false;
                  return var8;
               } else {
                  this.deleteTranslations(localTrxName);
                  PO_Record.deleteCascade(AD_Table_ID, Record_ID, localTrxName);
                  StringBuffer sql = (new StringBuffer("DELETE FROM ")).append(this.p_info.getTableName()).append(" WHERE ").append(this.get_WhereClause(true));
                
                  int no;
                  if (this.isUseTimeoutForUpdate()) {
                     no = DB.executeUpdateEx(sql.toString(), localTrxName, 10);
                  } else {
                     no = DB.executeUpdate(sql.toString(), localTrxName);
                  }

                  success = no == 1;
                  this.m_idOld = this.get_ID();
                  if (!success) {
                     this.log.warning("Not deleted");
                     if (localTrx != null) {
                        localTrx.rollback();
                     }
                  } else if (success) {
                     MSession session = MSession.get(this.p_ctx, false, false);
                     if (session == null) {
                        this.log.fine("No Session found");
                     } else if (Ini.isPropertyBool("LogMigrationScript")) {
                        session.logMigration(this, this.p_info, "D");
                     }

                     if (this.p_info.isChangeLog()) {
                        if (session != null && this.m_IDs.length == 1) {
                           int AD_ChangeLog_ID = 0;
                           int size = this.get_ColumnCount();

                           for(int i = 0; i < size; ++i) {
                              Object value = this.m_oldValues[i];
                              if (value != null && this.p_info.isAllowLogging(i) && !this.p_info.isEncrypted(i) && !this.p_info.isVirtualColumn(i) && !"Password".equals(this.p_info.getColumnName(i)) && !this.p_info.getTableName().equals("AD_Session")) {
                                 MChangeLog cLog = session.changeLog(this.m_trxName != null ? this.m_trxName : localTrxName, AD_ChangeLog_ID, AD_Table_ID, this.p_info.getColumn(i).AD_Column_ID, Record_ID, this.getAD_Client_ID(), this.getAD_Org_ID(), value, (Object)null, "D");
                                 if (cLog != null) {
                                    AD_ChangeLog_ID = cLog.getAD_ChangeLog_ID();
                                 }
                              }
                           }
                        }

                        this.m_IDs[0] = I_ZERO;
                        if (this.m_trxName == null) {
                           this.log.fine("complete");
                        } else {
                           this.log.fine("[" + this.m_trxName + "] - complete");
                        }

                        this.m_attachment = null;
                     }
                  } else {
                     this.log.warning("Not deleted");
                  }

                  try {
                     success = this.afterDelete(success);
                     if (success) {
                        this.deleteTreeNode();
                     }
                  } catch (Exception var22) {
                     this.log.log(Level.WARNING, "afterDelete", var22);
                     this.log.saveError("Error", var22, false);
                     success = false;
                  }

                  if (success) {
                     errorMsg = ModelValidationEngine.get().fireModelChange(this, 6);
                     if (errorMsg != null) {
                        this.log.saveError("Error", errorMsg);
                        success = false;
                     }
                  }

                  if (!success) {
                     if (localTrx != null) {
                        localTrx.rollback();
                     }
                  } else if (localTrx != null) {
                     try {
                        localTrx.commit(true);
                     } catch (SQLException var21) {
                        this.log.saveError("Error", var21);
                        success = false;
                     }
                  }

                  if (success) {
                     this.m_idOld = 0;
                     int size = this.p_info.getColumnCount();
                     this.m_oldValues = new Object[size];
                     this.m_newValues = new Object[size];
                     CacheMgt.get().reset(this.p_info.getTableName());
                  }

                  return success;
               }
            }
         } finally {
            if (localTrx != null) {
               localTrx.close();
               this.m_trxName = null;
            }

         }
      }
   }

   public void deleteEx(boolean force) throws AdempiereException {
      if (!this.delete(force)) {
         String msg = null;
         ValueNamePair err = CLogger.retrieveError();
         if (err != null) {
            msg = err.getName();
         }

         if (msg == null || msg.length() == 0) {
            msg = "DeleteError";
         }

         throw new AdempiereException(msg);
      }
   }

   public boolean delete(boolean force, String trxName) {
      this.set_TrxName(trxName);
      return this.delete(force);
   }

   public void deleteEx(boolean force, String trxName) throws AdempiereException {
      this.set_TrxName(trxName);
      this.deleteEx(force);
   }

   protected boolean beforeDelete() {
      return true;
   }

   protected boolean afterDelete(boolean success) {
      return success;
   }

   public boolean insertTranslations() {
      if (this.m_IDs.length <= 1 && !this.m_IDs[0].equals(I_ZERO) && this.p_info.isTranslated() && this.m_IDs[0] instanceof Integer) {
         ArrayList<String> tColumns = new ArrayList();

         for(int i = 0; i < this.p_info.getColumnCount(); ++i) {
            if (this.p_info.isColumnTranslated(i)) {
               tColumns.add(this.p_info.getColumnName(i));
            }
         }

         if (tColumns.size() == 0) {
            return true;
         } else {
            MLanguage[] langs = MLanguage.getMaintainLanguage(this.getCtx());
            if (langs.length == 0) {
               return true;
            } else {
               String tableName = this.p_info.getTableName() + "_Trl";
               String keyColumn = this.m_KeyColumns[0];
               MTable table = MTable.get(this.getCtx(), tableName);
               if (table == null) {
                  this.log.warning("Table [" + tableName + "] Not found");
                  return false;
               } else {
                  int no = 0;
                  MLanguage[] var7 = langs;
                  int var8 = langs.length;

                  for(int var9 = 0; var9 < var8; ++var9) {
                     MLanguage language = var7[var9];
                     GenericPO po = new GenericPO(tableName, this.getCtx(), -1);
                     po.set_Value(keyColumn, this.get_ID());
                     po.set_Value("IsTranslated", false);
                     po.set_Value("AD_Language", language.getAD_Language());
                     po.setAD_Client_ID(this.getAD_Client_ID());
                     po.setAD_Org_ID(0);
                     Iterator var12 = tColumns.iterator();

                     while(var12.hasNext()) {
                        String translationColumn = (String)var12.next();
                        Object value = this.get_Value(translationColumn);
                        po.set_Value(translationColumn, value);
                     }

                     po.saveEx(this.m_trxName);
                     ++no;
                  }

                  this.log.fine("#" + no);
                  return no >= 0;
               }
            }
         }
      } else {
         return true;
      }
   }

   private boolean updateTranslations() {
      if (this.m_IDs.length <= 1 && !this.m_IDs[0].equals(I_ZERO) && this.p_info.isTranslated() && this.m_IDs[0] instanceof Integer) {
         boolean trlColumnChanged = false;

         for(int i = 0; i < this.p_info.getColumnCount(); ++i) {
            if (this.p_info.isColumnTranslated(i) && this.is_ValueChanged(this.p_info.getColumnName(i))) {
               trlColumnChanged = true;
               break;
            }
         }

         if (!trlColumnChanged) {
            return true;
         } else {
            String tableName = this.p_info.getTableName() + "_Trl";
            String keyColumn = this.m_KeyColumns[0];
            MTable table = MTable.get(this.getCtx(), tableName);
            if (table == null) {
               this.log.warning("Table [" + tableName + "] Not found");
               return false;
            } else {
               MClient client = MClient.get(this.getCtx());
               List<PO> trlList = (new Query(this.getCtx(), tableName, keyColumn + " = ?", this.get_TrxName())).setParameters(new Object[]{this.get_ID()}).list();
               if (trlList != null && trlList.size() != 0) {
                  int no = 0;

                  for(Iterator var8 = trlList.iterator(); var8.hasNext(); ++no) {
                     PO trl = (PO)var8.next();
                     boolean isTranslated = false;
                     if (client.isAutoUpdateTrl(tableName)) {
                        for(int i = 0; i < this.p_info.getColumnCount(); ++i) {
                           if (this.p_info.isColumnTranslated(i)) {
                              String columnName = this.p_info.getColumnName(i);
                              Object value = this.get_Value(columnName);
                              trl.set_Value(columnName, value);
                           }
                        }

                        isTranslated = true;
                     }

                     trl.set_Value("IsTranslated", isTranslated);
                     trl.saveEx(this.m_trxName);
                  }

                  this.log.fine("#" + no);
                  return no >= 0;
               } else {
                  return true;
               }
            }
         }
      } else {
         return true;
      }
   }

   private boolean deleteTranslations(String trxName) {
      if (this.m_IDs.length <= 1 && !this.m_IDs[0].equals(I_ZERO) && this.p_info.isTranslated() && this.m_IDs[0] instanceof Integer) {
         String tableName = this.p_info.getTableName() + "_Trl";
         String keyColumn = this.m_KeyColumns[0];
         List<PO> trlList = (new Query(this.getCtx(), tableName, keyColumn + " = ?", this.get_TrxName())).setParameters(new Object[]{this.get_ID()}).list();
         if (trlList != null && trlList.size() != 0) {
            int no = 0;

            for(Iterator var6 = trlList.iterator(); var6.hasNext(); ++no) {
               PO trl = (PO)var6.next();
               trl.deleteEx(true, this.m_trxName);
            }

            this.log.fine("#" + no);
            return no >= 0;
         } else {
            return true;
         }
      } else {
         return true;
      }
   }

   protected boolean insert_Accounting(String acctTable, String acctBaseTable, String whereClause) {
      if (this.s_acctColumns == null || acctTable.startsWith("C_BP_")) {
         this.s_acctColumns = new ArrayList();
         String sql = "SELECT c.ColumnName FROM AD_Column c INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) WHERE t.TableName=? AND c.IsActive='Y' AND c.AD_Reference_ID=25 ORDER BY c.ColumnName";
         PreparedStatement pstmt = null;
         ResultSet rs = null;

         try {
            pstmt = DB.prepareStatement(sql, (String)null);
            pstmt.setString(1, acctTable);
            rs = pstmt.executeQuery();

            while(rs.next()) {
               this.s_acctColumns.add(rs.getString(1));
            }
         } catch (Exception var11) {
            this.log.log(Level.SEVERE, acctTable, var11);
         } finally {
            DB.close(rs, pstmt);
            rs = null;
            pstmt = null;
         }

         if (this.s_acctColumns.size() == 0) {
            this.log.severe("No Columns for " + acctTable);
            return false;
         }
      }

      AtomicBoolean inserted = new AtomicBoolean(false);
      Arrays.stream(MAcctSchema.getClientAcctSchema(this.getCtx(), this.getAD_Client_ID(), this.get_TrxName())).filter((accountSchema) -> {
         return accountSchema != null;
      }).forEach((accountSchema) -> {
         PreparedStatement statement = null;
         ResultSet resultSet = null;
         ArrayList parameters = new ArrayList();

         try {
            StringBuilder select = new StringBuilder();
            select.append("SELECT  * FROM ").append(acctBaseTable).append(" p WHERE p.AD_Client_ID=? AND ").append("p.C_AcctSchema_ID=?");
            if (whereClause != null && whereClause.length() > 0) {
               select.append(" AND ").append(whereClause);
            }

            select.append(" AND NOT EXISTS (SELECT * FROM ").append(acctTable).append(" e WHERE e.C_AcctSchema_ID=p.C_AcctSchema_ID AND e.").append(this.get_TableName()).append("_ID=? )");
            parameters.add(this.getAD_Client_ID());
            parameters.add(accountSchema.getC_AcctSchema_ID());
            parameters.add(this.get_ID());
            statement = DB.prepareStatement(select.toString(), this.get_TrxName());
            DB.setParameters(statement, parameters);
            resultSet = statement.executeQuery();
            PO accountBase = null;
            if (resultSet.next()) {
               accountBase = MTable.get(this.getCtx(), acctBaseTable).getPO(resultSet, this.get_TrxName());
            }

            if (accountBase != null) {
               StringBuilder where = new StringBuilder();
               where.append("C_AcctSchema_ID").append("=? AND ").append(this.get_TableName()).append("_ID=?");
               parameters = new ArrayList();
               parameters.add(accountSchema.getC_AcctSchema_ID());
               parameters.add(this.get_ID());
               PO accountSetting = MTable.get(this.getCtx(), acctTable).getPO(where.toString(), parameters.toArray(), this.get_TrxName());
               if (accountSetting == null) {
                  accountSetting = MTable.get(this.getCtx(), acctTable).getPO(0, this.get_TrxName());
                  accountSetting.setAD_Client_ID(this.getAD_Client_ID());
                  accountSetting.setAD_Org_ID(0);
                  accountSetting.set_Value("C_AcctSchema_ID", accountSchema.getC_AcctSchema_ID());
                  accountSetting.set_Value(this.get_TableName() + "_ID", this.get_ID());
                  Iterator var13 = this.s_acctColumns.iterator();

                  while(var13.hasNext()) {
                     String columnName = (String)var13.next();
                     accountSetting.set_Value(columnName, accountBase.get_Value(columnName));
                  }

                  accountSetting.saveEx();
                  inserted.set(true);
               }
            }
         } catch (Exception var18) {
            this.log.log(Level.SEVERE, acctTable, var18);
         } finally {
            DB.close(resultSet, statement);
            resultSet = null;
            statement = null;
         }

      });
      return inserted.get();
   }

   protected boolean delete_Accounting(String acctTable) {
      return true;
   }

   private boolean insertTreeNode() {
      int tableId = this.get_Table_ID();
      String whereClause = null;
      if (!MTree.hasTree(tableId)) {
         return false;
      } else {
         AtomicReference<String> treeTableName = new AtomicReference();
         AtomicInteger treeId = new AtomicInteger();
         AtomicInteger parentColumnId = new AtomicInteger();
         AtomicInteger sortColumnId = new AtomicInteger();
         int elementId = 0;
         if (tableId == X_C_ElementValue.Table_ID) {
            Integer ii = (Integer)this.get_Value("C_Element_ID");
            if (ii != null) {
               elementId = ii;
               whereClause = "C_Element_ID = " + elementId;
               MElement element = MElement.get(this.getCtx(), elementId, this.get_TrxName());
               Optional.ofNullable(element.getTree()).ifPresent((treex) -> {
                  treeTableName.set(MTree.getNodeTableName(treex.getTreeType()));
                  treeId.set(element.getAD_Tree_ID());
                  parentColumnId.set(treex.getParent_Column_ID());
                  sortColumnId.set(treex.getAD_ColumnSortOrder_ID());
               });
            }
         }

         if (treeTableName.get() == null) {
            treeTableName.set(MTree.getNodeTableName(tableId));
         }

         if (treeId.get() <= 0) {
            treeId.set(MTree.getDefaultTreeIdFromTableId(this.getAD_Client_ID(), tableId, elementId));
         }

         if (treeId.get() <= 0) {
            return false;
         } else if (treeTableName.get() == null) {
            return false;
         } else {
            if (elementId <= 0) {
               MTree tree = new MTree(this.getCtx(), treeId.get(), this.get_TrxName());
               parentColumnId.set(tree.getParent_Column_ID());
               sortColumnId.set(tree.getAD_ColumnSortOrder_ID());
            }

            PO treeNode = MTable.get(this.getCtx(), (String)treeTableName.get()).getPO(0, this.get_TrxName());
            treeNode.setAD_Client_ID(this.getAD_Client_ID());
            treeNode.setAD_Org_ID(0);
            treeNode.setIsActive(true);
            treeNode.set_CustomColumn("AD_Tree_ID", treeId.get());
            treeNode.set_CustomColumn("Node_ID", this.get_ID());
            MColumn parentColumnIDforTree = null;
            if (parentColumnId.get() > 0) {
               parentColumnIDforTree = MColumn.get(this.getCtx(), parentColumnId.get());
               treeNode.set_CustomColumn("Parent_ID", this.get_ValueAsInt(parentColumnIDforTree.getColumnName()));
            } else {
               treeNode.set_CustomColumn("Parent_ID", 0);
            }

            if (treeNode.get_ValueAsInt("Parent_ID") == 0 && sortColumnId.get() > 0) {
               MColumn columnSortforTree = MColumn.get(this.getCtx(), sortColumnId.get());
               treeNode.set_CustomColumn("Parent_ID", this.getParentFromSort(columnSortforTree.getColumnName(), this.get_ValueAsString(columnSortforTree.getColumnName()), whereClause));
               if (parentColumnIDforTree != null && treeNode.get_ValueAsInt("Parent_ID") != this.get_ValueAsInt(parentColumnIDforTree.getColumnName())) {
                  this.set_Value(parentColumnIDforTree.getColumnName(), treeNode.get_ValueAsInt("Parent_ID"));
                  this.saveEx();
               }
            }

            treeNode.set_CustomColumn("SeqNo", 999);
            treeNode.saveEx();
            return true;
         }
      }
   }

   private boolean updateTreeNode() {
      int tableId = this.get_Table_ID();
      if (!MTree.hasTree(tableId)) {
         return false;
      } else {
         AtomicReference<String> treeTableName = new AtomicReference();
         AtomicInteger treeId = new AtomicInteger();
         AtomicInteger parentColumnId = new AtomicInteger();
         AtomicInteger sortColumnId = new AtomicInteger();
         int elementId = 0;
         if (tableId == X_C_ElementValue.Table_ID) {
            Integer ii = (Integer)this.get_Value("C_Element_ID");
            if (ii != null) {
               elementId = ii;
               MElement element = MElement.get(this.getCtx(), elementId, this.get_TrxName());
               Optional.ofNullable(element.getTree()).ifPresent((treex) -> {
                  treeTableName.set(MTree.getNodeTableName(treex.getTreeType()));
                  treeId.set(element.getAD_Tree_ID());
                  parentColumnId.set(treex.getParent_Column_ID());
                  sortColumnId.set(treex.getAD_ColumnSortOrder_ID());
               });
            }
         }

         if (treeTableName.get() == null) {
            treeTableName.set(MTree.getNodeTableName(tableId));
         }

         if (treeId.get() <= 0) {
            treeId.set(MTree.getDefaultTreeIdFromTableId(this.getAD_Client_ID(), tableId, elementId));
         }

         if (treeId.get() <= 0) {
            return false;
         } else if (treeTableName.get() == null) {
            return false;
         } else {
            if (elementId <= 0) {
               MTree tree = new MTree(this.getCtx(), treeId.get(), this.get_TrxName());
               parentColumnId.set(tree.getParent_Column_ID());
               sortColumnId.set(tree.getAD_ColumnSortOrder_ID());
            }

            PO treeNode = MTable.get(this.getCtx(), (String)treeTableName.get()).getPO("Node_ID = " + this.get_ID(), this.get_TrxName());
            if (treeNode != null && parentColumnId.get() > 0) {
               MColumn columnIDforTree = MColumn.get(this.getCtx(), parentColumnId.get());
               if (this.get_ValueAsInt(columnIDforTree.getColumnName()) != treeNode.get_ValueAsInt("Parent_ID")) {
                  treeNode.set_CustomColumn("Parent_ID", this.get_ValueAsInt(columnIDforTree.getColumnName()));
                  treeNode.saveEx();
               }
            }

            return true;
         }
      }
   }

   protected boolean deleteTreeNode() {
      int id = this.get_ID();
      if (id == 0) {
         id = this.get_IDOld();
      }

      int AD_Table_ID = this.get_Table_ID();
      if (!MTree.hasTree(AD_Table_ID)) {
         return false;
      } else {
         int treeId = MTree.getDefaultTreeIdFromTableId(this.getAD_Client_ID(), this.get_Table_ID());
         if (treeId < 0) {
            return false;
         } else {
            String treeNodeTableName = MTree.getNodeTableName(this.get_Table_ID());
            String whereClause = treeNodeTableName + ".Node_ID=" + id + " AND EXISTS (SELECT 1 FROM AD_Tree t WHERE t.AD_Tree_ID=" + treeNodeTableName + ".AD_Tree_ID AND t.AD_Table_ID=" + this.get_Table_ID() + ")";
            PO treeNode = MTable.get(this.getCtx(), treeNodeTableName).getPO(whereClause, this.get_TrxName());
            if (treeNode != null) {
               treeNode.deleteEx(true);
            }

            return true;
         }
      }
   }

   public boolean lock() {
      int index = this.get_ProcessingIndex();
      if (index != -1) {
         this.m_newValues[index] = Boolean.TRUE;
         String var10000 = this.p_info.getTableName();
         String sql = "UPDATE " + var10000 + " SET Processing='Y' WHERE (Processing='N' OR Processing IS NULL) AND " + this.get_WhereClause(true);
         boolean success = false;
         if (this.isUseTimeoutForUpdate()) {
            success = DB.executeUpdateEx(sql, (String)null, 10) == 1;
         } else {
            success = DB.executeUpdate(sql, (String)null) == 1;
         }

         if (success) {
            this.log.fine("success");
         } else {
            this.log.log(Level.WARNING, "failed");
         }

         return success;
      } else {
         return false;
      }
   }

   private int get_ProcessingIndex() {
      return this.p_info.getColumnIndex("Processing");
   }

   public boolean unlock(String trxName) {
      int index = this.get_ProcessingIndex();
      if (index != -1) {
         this.m_newValues[index] = Boolean.FALSE;
         String var10000 = this.p_info.getTableName();
         String sql = "UPDATE " + var10000 + " SET Processing='N' WHERE " + this.get_WhereClause(true);
         boolean success = false;
         if (this.isUseTimeoutForUpdate()) {
            success = DB.executeUpdateEx(sql, trxName, 10) == 1;
         } else {
            success = DB.executeUpdate(sql, trxName) == 1;
         }

         if (success) {
            String var10001 = trxName == null ? "" : "[" + trxName + "]";
            this.log.fine("success" + var10001);
         } else {
            String var10002 = trxName == null ? "" : " [" + trxName + "]";
            this.log.log(Level.WARNING, "failed" + var10002);
         }

         return success;
      } else {
         return true;
      }
   }

   public void set_TrxName(String trxName) {
      this.m_trxName = trxName;
   }

   public String get_TrxName() {
      return this.m_trxName;
   }

   public MAttachment getAttachment() {
      return this.getAttachment(false);
   }

   public MAttachment getAttachment(boolean requery) {
      if (this.m_attachment == null || requery) {
         this.m_attachment = MAttachment.get(this.getCtx(), this.p_info.getAD_Table_ID(), this.get_ID());
      }

      return this.m_attachment;
   }

   public MAttachment createAttachment() {
      this.getAttachment(false);
      if (this.m_attachment == null) {
         this.m_attachment = new MAttachment(this.getCtx(), this.p_info.getAD_Table_ID(), this.get_ID(), (String)null);
      }

      return this.m_attachment;
   }

   public boolean isAttachment(String extension) {
      this.getAttachment(false);
      if (this.m_attachment == null) {
         return false;
      } else {
         for(int i = 0; i < this.m_attachment.getEntryCount(); ++i) {
            if (this.m_attachment.getEntryName(i).endsWith(extension)) {
               this.log.fine("#" + i + ": " + this.m_attachment.getEntryName(i));
               return true;
            }
         }

         return false;
      }
   }

   public byte[] getAttachmentData(String extension) {
      this.getAttachment(false);
      if (this.m_attachment == null) {
         return null;
      } else {
         for(int i = 0; i < this.m_attachment.getEntryCount(); ++i) {
            if (this.m_attachment.getEntryName(i).endsWith(extension)) {
               this.log.fine("#" + i + ": " + this.m_attachment.getEntryName(i));
               return this.m_attachment.getEntryData(i);
            }
         }

         return null;
      }
   }

   public boolean isPdfAttachment() {
      return this.isAttachment(".pdf");
   }

   public byte[] getPdfAttachment() {
      return this.getAttachmentData(".pdf");
   }

   public void dump() {
      if (CLogMgt.isLevelFinest()) {
         this.log.finer(this.get_WhereClause(true));

         for(int i = 0; i < this.get_ColumnCount(); ++i) {
            this.dump(i);
         }
      }

   }

   public void dump(int index) {
      StringBuffer sb = (new StringBuffer(" ")).append(index);
      if (index >= 0 && index < this.get_ColumnCount()) {
         sb.append(": ").append(this.get_ColumnName(index)).append(" = ").append(this.m_oldValues[index]).append(" (").append(this.m_newValues[index]).append(")");
         this.log.finest(sb.toString());
      } else {
         this.log.finest(sb.append(": invalid").toString());
      }
   }

   public static int[] getAllIDs(String TableName, String WhereClause, String trxName) {
      ArrayList<Integer> list = new ArrayList();
      StringBuffer sql = new StringBuffer("SELECT ");
      sql.append(TableName).append("_ID FROM ").append(TableName);
      if (WhereClause != null && WhereClause.length() > 0) {
         sql.append(" WHERE ").append(WhereClause);
      }

      PreparedStatement pstmt = null;
      ResultSet rs = null;

      label79: {
         Object var8;
         try {
            pstmt = DB.prepareStatement(sql.toString(), trxName);
            rs = pstmt.executeQuery();

            while(true) {
               if (!rs.next()) {
                  break label79;
               }

               list.add(rs.getInt(1));
            }
         } catch (SQLException var12) {
            s_log.log(Level.SEVERE, sql.toString(), var12);
            var8 = null;
         } finally {
            DB.close(rs, pstmt);
            rs = null;
            pstmt = null;
         }

         return (int[])var8;
      }

      int[] retValue = new int[list.size()];

      for(int i = 0; i < retValue.length; ++i) {
         retValue[i] = (Integer)list.get(i);
      }

      return retValue;
   }

   protected static String getFindParameter(String query) {
      if (query == null) {
         return null;
      } else if (query.length() != 0 && !query.equals("%")) {
         if (!query.endsWith("%")) {
            query = query + "%";
         }

         return query.toUpperCase();
      } else {
         return null;
      }
   }

   private Object get_LOB(Object value) {
      this.log.fine("Value=" + value);
      if (value == null) {
         return null;
      } else {
         Object retValue = null;
         long length = -99L;

         try {
            if (!(value instanceof String) && !(value instanceof byte[])) {
               if (value instanceof Clob) {
                  Clob clob = (Clob)value;
                  length = clob.length();
                  retValue = clob.getSubString(1L, (int)length);
               } else if (value instanceof Blob) {
                  Blob blob = (Blob)value;
                  length = blob.length();
                  int index = 1;
                  if (blob.getClass().getName().equals("oracle.jdbc.rowset.OracleSerialBlob")) {
                     index = 0;
                  }

                  retValue = blob.getBytes((long)index, (int)length);
               } else {
                  this.log.log(Level.SEVERE, "Unknown: " + value);
               }
            } else {
               retValue = value;
            }
         } catch (Exception var7) {
            this.log.log(Level.SEVERE, "Length=" + length, var7);
         }

         return retValue;
      }
   }

   private void lobReset() {
      this.m_lobInfo = null;
   }

   private void lobAdd(Object value, int index, int displayType) {
      this.log.finest("Value=" + value);
      PO_LOB lob = new PO_LOB(this.p_info.getTableName(), this.get_ColumnName(index), this.get_WhereClause(true), displayType, value);
      if (this.m_lobInfo == null) {
         this.m_lobInfo = new ArrayList();
      }

      this.m_lobInfo.add(lob);
   }

   private boolean lobSave() {
      if (this.m_lobInfo == null) {
         return true;
      } else {
         boolean retValue = true;

         for(int i = 0; i < this.m_lobInfo.size(); ++i) {
            PO_LOB lob = (PO_LOB)this.m_lobInfo.get(i);
            if (!lob.save(this.get_TrxName())) {
               retValue = false;
               break;
            }
         }

         this.lobReset();
         return retValue;
      }
   }

   public StringBuffer get_xmlString(StringBuffer xml) {
      if (xml == null) {
         xml = new StringBuffer();
      } else {
         xml.append(Env.NL);
      }

      try {
         StringWriter writer = new StringWriter();
         StreamResult result = new StreamResult(writer);
         DOMSource source = new DOMSource(this.get_xmlDocument(xml.length() != 0));
         TransformerFactory tFactory = TransformerFactory.newInstance();
         Transformer transformer = tFactory.newTransformer();
         transformer.setOutputProperty("indent", "yes");
         transformer.transform(source, result);
         StringBuffer newXML = writer.getBuffer();
         if (xml.length() != 0) {
            int tagIndex = newXML.indexOf("?>");
            if (tagIndex != -1) {
               xml.append(newXML.substring(tagIndex + 2));
            } else {
               xml.append(newXML);
            }
         } else {
            xml.append(newXML);
         }
      } catch (Exception var9) {
         this.log.log(Level.SEVERE, "", var9);
      }

      return xml;
   }

   public Document get_xmlDocument(boolean noComment) {
      Document document = null;

      try {
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         DocumentBuilder builder = factory.newDocumentBuilder();
         document = builder.newDocument();
         if (!noComment) {
            document.appendChild(document.createComment(Adempiere.getSummaryAscii()));
         }
      } catch (Exception var11) {
         this.log.log(Level.SEVERE, "", var11);
      }

      Element root = document.createElement(this.get_TableName());
      root.setAttribute("AD_Table_ID", String.valueOf(this.get_Table_ID()));
      root.setAttribute("Record_ID", String.valueOf(this.get_ID()));
      document.appendChild(root);
      int size = this.get_ColumnCount();

      for(int i = 0; i < size; ++i) {
         if (!this.p_info.isVirtualColumn(i)) {
            Element col = document.createElement(this.p_info.getColumnName(i));
            Object value = this.get_Value(i);
            int dt = this.p_info.getColumnDisplayType(i);
            Class<?> c = this.p_info.getColumnClass(i);
            if (value != null && !value.equals(Null.NULL)) {
               if (c == Object.class) {
                  col.appendChild(document.createCDATASection(value.toString()));
               } else if (!(value instanceof Integer) && !(value instanceof BigDecimal)) {
                  if (c == Boolean.class) {
                     boolean bValue = false;
                     if (value instanceof Boolean) {
                        bValue = (Boolean)value;
                     } else {
                        bValue = "Y".equals(value);
                     }

                     col.appendChild(document.createTextNode(bValue ? "Y" : "N"));
                  } else if (value instanceof Timestamp) {
                     col.appendChild(document.createTextNode(value.toString()));
                  } else if (c == String.class) {
                     col.appendChild(document.createCDATASection((String)value));
                  } else if (DisplayType.isLOB(dt)) {
                     col.appendChild(document.createCDATASection(value.toString()));
                  } else {
                     col.appendChild(document.createCDATASection(value.toString()));
                  }
               } else {
                  col.appendChild(document.createTextNode(value.toString()));
               }
            }

            root.appendChild(col);
         }
      }

      if (this.m_custom != null) {
         Element col;
         for(Iterator it = this.m_custom.keySet().iterator(); it.hasNext(); root.appendChild(col)) {
            String columnName = (String)it.next();
            String value = (String)this.m_custom.get(columnName);
            col = document.createElement(columnName);
            if (value != null) {
               col.appendChild(document.createTextNode(value));
            }
         }

         this.m_custom = null;
      }

      return document;
   }

   public void setDoc(Doc doc) {
      this.m_doc = doc;
   }

   public void setReplication(boolean isFromReplication) {
      this.m_isReplication = isFromReplication;
   }

   public boolean isReplication() {
      return this.m_isReplication;
   }

   public Doc getDoc() {
      return this.m_doc;
   }

   public static void set_TrxName(PO[] lines, String trxName) {
      PO[] var2 = lines;
      int var3 = lines.length;

      for(int var4 = 0; var4 < var3; ++var4) {
         PO line = var2[var4];
         line.set_TrxName(trxName);
      }

   }

   public int get_ValueAsInt(String columnName) {
      int idx = this.get_ColumnIndex(columnName);
      return idx < 0 ? 0 : this.get_ValueAsInt(idx);
   }

   public boolean get_ValueAsBoolean(String columnName) {
      Object oo = this.get_Value(columnName);
      if (oo != null) {
         return oo instanceof Boolean ? (Boolean)oo : "Y".equals(oo);
      } else {
         return false;
      }
   }

   protected Object clone() throws CloneNotSupportedException {
      PO clone = (PO)super.clone();
      clone.m_trxName = null;
      if (this.m_custom != null) {
         clone.m_custom = new HashMap();
         clone.m_custom.putAll(this.m_custom);
      }

      int i;
      if (this.m_newValues != null) {
         clone.m_newValues = new Object[this.m_newValues.length];

         for(i = 0; i < this.m_newValues.length; ++i) {
            clone.m_newValues[i] = this.m_newValues[i];
         }
      }

      if (this.m_oldValues != null) {
         clone.m_oldValues = new Object[this.m_oldValues.length];

         for(i = 0; i < this.m_oldValues.length; ++i) {
            clone.m_oldValues[i] = this.m_oldValues[i];
         }
      }

      if (this.m_IDs != null) {
         clone.m_IDs = new Object[this.m_IDs.length];

         for(i = 0; i < this.m_IDs.length; ++i) {
            clone.m_IDs[i] = this.m_IDs[i];
         }
      }

      clone.p_ctx = Env.getCtx();
      clone.m_doc = null;
      clone.m_lobInfo = null;
      clone.m_attachment = null;
      clone.m_isReplication = false;
      return clone;
   }

   private int getParentFromSort(String sortColumn, String sortValue, String whereClause) {
      Integer parentID = 0;
      whereClause = (String)Optional.ofNullable(whereClause + " AND ").orElse("");
      if (sortValue != null) {
         List<PO> parentPO = (new Query(this.getCtx(), this.get_TableName(), whereClause + " IsSummary = 'Y' ", this.get_TrxName())).setOrderBy(sortColumn).list();
         HashMap<String, Integer> currentValues = new HashMap();
         Iterator var7 = parentPO.iterator();

         while(var7.hasNext()) {
            PO po = (PO)var7.next();
            currentValues.put(po.get_ValueAsString(sortColumn), po.get_ID());
         }

         while(sortValue.length() > 0) {
            sortValue = sortValue.substring(0, sortValue.length() - 1);
            parentID = (Integer)currentValues.get(sortValue);
            if (parentID != null) {
               break;
            }

            parentID = 0;
         }
      }

      return parentID;
   }
}
